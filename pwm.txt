; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\pwm.o --asm_dir=.\ --list_dir=.\ --depend=.\pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Header_Files -I.\Header_Files\STM32F10x -I.\Source_Files -IC:\Program_Files\Keil_v5\ARM\RV31\INC -IC:\Program_Files\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Program_Files\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -DSTM32F10X_MD -DSTM32F10X_MD -D__NO_EMBEDDED_ASM --omf_browse=.\pwm.crf Source_Files\pwm.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN3PWMC2EPvjtt                  ; Alternate entry point ; PWM::PWM__sub_object(void*, unsigned, unsigned short, unsigned short)
                  _ZN3PWMC1EPvjtt PROC ; PWM::PWM(void*, unsigned, unsigned short, unsigned short)
;;;3      
;;;4      PWM ::PWM(void *PinOut, BOOL Polarity, U16 frequency,U16 duty)
;;;5      {
;;;6      	U8 index;
;;;7      	U16 top;
;;;8      	U16 arr;
;;;9      
;;;10     	top = (U32)200000/frequency; //source clk 200KHZ
;;;11     	arr = (U32)top*duty/10000;
;;;12     	for(index = 0;index <MAX_CHANNEL;index ++)
;;;13     	{
;;;14     		En[index] = FALSE;
;;;15     		Count[index] = 0x0000;
;;;16     		this->Top[index] = top;
;;;17     		this->Arr[index] = arr;
;;;18     		this->Polarity[index] = Polarity; 
;;;19     		this->PinOut[index] = ((void (**)(U8))PinOut)[index];
;;;20     		this->PinOut[index](Polarity);
;;;21     	}
;;;22     }
;;;23     
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
000010  4869              LDR      r0,|L1.440|
000012  fbb0f0f8          UDIV     r0,r0,r8
000016  fa1ff980          UXTH     r9,r0
00001a  fb09f00a          MUL      r0,r9,r10
00001e  f2427110          MOV      r1,#0x2710
000022  fbb0f0f1          UDIV     r0,r0,r1
000026  fa1ffb80          UXTH     r11,r0
00002a  2400              MOVS     r4,#0
00002c  e01d              B        |L1.106|
                  |L1.46|
00002e  2000              MOVS     r0,#0
000030  f8450024          STR      r0,[r5,r4,LSL #2]
000034  2100              MOVS     r1,#0
000036  f1050058          ADD      r0,r5,#0x58
00003a  f8201014          STRH     r1,[r0,r4,LSL #1]
00003e  382c              SUBS     r0,r0,#0x2c
000040  f8209014          STRH     r9,[r0,r4,LSL #1]
000044  3016              ADDS     r0,r0,#0x16
000046  f820b014          STRH     r11,[r0,r4,LSL #1]
00004a  302e              ADDS     r0,r0,#0x2e
00004c  f8406024          STR      r6,[r0,r4,LSL #2]
000050  f8571024          LDR      r1,[r7,r4,LSL #2]
000054  302c              ADDS     r0,r0,#0x2c
000056  f8401024          STR      r1,[r0,r4,LSL #2]
00005a  b2f0              UXTB     r0,r6
00005c  f105029c          ADD      r2,r5,#0x9c
000060  f8521024          LDR      r1,[r2,r4,LSL #2]
000064  4788              BLX      r1
000066  1c60              ADDS     r0,r4,#1
000068  b2c4              UXTB     r4,r0
                  |L1.106|
00006a  2c0b              CMP      r4,#0xb
00006c  dbdf              BLT      |L1.46|
00006e  4628              MOV      r0,r5
000070  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  _ZN3PWMD2Ev                  ; Alternate entry point ; PWM::~PWM__sub_object()
                  _ZN3PWMD1Ev PROC ; PWM::~PWM()
;;;24     PWM ::~PWM()
;;;25     {
;;;26     	
;;;27     	
;;;28     	
;;;29     }
;;;30     
000074  4770              BX       lr
                          ENDP

                  _ZN3PWM5ResetEh PROC ; PWM::Reset(unsigned char)
;;;31     
;;;32     void PWM ::Reset(U8 index)
000076  b570              PUSH     {r4-r6,lr}
;;;33     {
000078  4604              MOV      r4,r0
00007a  460d              MOV      r5,r1
;;;34     	Count[index] = 0x0000;
00007c  2100              MOVS     r1,#0
00007e  f1040058          ADD      r0,r4,#0x58
000082  f8201015          STRH     r1,[r0,r5,LSL #1]
;;;35     	PinOut[index](Polarity[index]);
000086  f1040270          ADD      r2,r4,#0x70
00008a  f8120025          LDRB     r0,[r2,r5,LSL #2]
00008e  322c              ADDS     r2,r2,#0x2c
000090  f8521025          LDR      r1,[r2,r5,LSL #2]
000094  4788              BLX      r1
;;;36     }
000096  bd70              POP      {r4-r6,pc}
;;;37     
                          ENDP

                  _ZN3PWM6EnableEh PROC ; PWM::Enable(unsigned char)
;;;38     void PWM ::Enable(U8 index)
000098  2201              MOVS     r2,#1
;;;39     {
;;;40     	En[index] = TRUE;
00009a  f8402021          STR      r2,[r0,r1,LSL #2]
;;;41     	//PinOut[index](Polarity[index]);
;;;42     }
00009e  4770              BX       lr
;;;43     
                          ENDP

                  _ZN3PWM7DisableEh PROC ; PWM::Disable(unsigned char)
;;;44     
;;;45     void PWM ::Disable(U8 index)
0000a0  b570              PUSH     {r4-r6,lr}
;;;46     {
0000a2  4605              MOV      r5,r0
0000a4  460c              MOV      r4,r1
;;;47     	En[index] = FALSE;
0000a6  2000              MOVS     r0,#0
0000a8  f8450024          STR      r0,[r5,r4,LSL #2]
;;;48     	Reset(index);
0000ac  4621              MOV      r1,r4
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       _ZN3PWM5ResetEh ; PWM::Reset(unsigned char)
;;;49     }
0000b4  bd70              POP      {r4-r6,pc}
;;;50     	 
                          ENDP

                  _ZN3PWM7SetDutyEht PROC ; PWM::SetDuty(unsigned char, unsigned short)
;;;51     void PWM::SetDuty(U8 index,U16 duty)
0000b6  b530              PUSH     {r4,r5,lr}
;;;52     {
;;;53     	U16 arr;
;;;54     
;;;55     	arr = (U16)((U32)Top[index]*duty/10000);
0000b8  f100042c          ADD      r4,r0,#0x2c
0000bc  f8344011          LDRH     r4,[r4,r1,LSL #1]
0000c0  4354              MULS     r4,r2,r4
0000c2  f2427510          MOV      r5,#0x2710
0000c6  fbb4f4f5          UDIV     r4,r4,r5
0000ca  b2a3              UXTH     r3,r4
;;;56     	Arr[index] = arr;
0000cc  f1000442          ADD      r4,r0,#0x42
0000d0  f8243011          STRH     r3,[r4,r1,LSL #1]
;;;57     }
0000d4  bd30              POP      {r4,r5,pc}
;;;58     
                          ENDP

                  _ZN3PWM12SetFrequencyEht PROC ; PWM::SetFrequency(unsigned char, unsigned short)
;;;59     
;;;60     void PWM::SetFrequency(U8 index,U16 frequency)
0000d6  b510              PUSH     {r4,lr}
;;;61     {
;;;62     	U16 top;
;;;63     
;;;64     	top = (U32)200000/frequency; //source clk 200KHZ
0000d8  4c37              LDR      r4,|L1.440|
0000da  fbb4f4f2          UDIV     r4,r4,r2
0000de  b2a3              UXTH     r3,r4
;;;65       Top[index] = top;
0000e0  f100042c          ADD      r4,r0,#0x2c
0000e4  f8243011          STRH     r3,[r4,r1,LSL #1]
;;;66     }
0000e8  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  _ZN3PWM11SetPolarityEhj PROC ; PWM::SetPolarity(unsigned char, unsigned)
;;;68     
;;;69     void PWM ::SetPolarity(U8 index,BOOL Polarity)
0000ea  b570              PUSH     {r4-r6,lr}
;;;70     {
0000ec  4606              MOV      r6,r0
0000ee  460c              MOV      r4,r1
0000f0  4615              MOV      r5,r2
;;;71     	this->Polarity[index] = Polarity;
0000f2  f1060070          ADD      r0,r6,#0x70
0000f6  f8405024          STR      r5,[r0,r4,LSL #2]
;;;72     	Reset(index);
0000fa  4621              MOV      r1,r4
0000fc  4630              MOV      r0,r6
0000fe  f7fffffe          BL       _ZN3PWM5ResetEh ; PWM::Reset(unsigned char)
;;;73     }
000102  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

                  _ZN3PWM15SetOutPutSignalEhPFvhE PROC ; PWM::SetOutPutSignal(unsigned char, void(*)(unsigned char))
;;;75     
;;;76     void PWM ::SetOutPutSignal(U8 index,void (*PinOut)(U8))
000104  b570              PUSH     {r4-r6,lr}
;;;77     {
000106  4606              MOV      r6,r0
000108  460c              MOV      r4,r1
00010a  4615              MOV      r5,r2
;;;78     	Reset(index);
00010c  4621              MOV      r1,r4
00010e  4630              MOV      r0,r6
000110  f7fffffe          BL       _ZN3PWM5ResetEh ; PWM::Reset(unsigned char)
;;;79     	this->PinOut[index] = PinOut;
000114  f106009c          ADD      r0,r6,#0x9c
000118  f8405024          STR      r5,[r0,r4,LSL #2]
;;;80     }
00011c  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  _ZN3PWM11RunningTaskEj PROC ; PWM::RunningTask(unsigned)
;;;82     void PWM ::RunningTask(U32 numClk)
00011e  b570              PUSH     {r4-r6,lr}
;;;83     {
000120  4605              MOV      r5,r0
000122  460e              MOV      r6,r1
;;;84     	U8 index;
;;;85     	
;;;86     	for(index = 0;index <MAX_CHANNEL;index ++)
000124  2400              MOVS     r4,#0
000126  e043              B        |L1.432|
                  |L1.296|
;;;87     	{
;;;88     		if(!En[index])continue;
000128  f8550024          LDR      r0,[r5,r4,LSL #2]
00012c  b900              CBNZ     r0,|L1.304|
00012e  e03d              B        |L1.428|
                  |L1.304|
;;;89     		if(Count[index] >= Arr[index])
000130  f1050058          ADD      r0,r5,#0x58
000134  f8301014          LDRH     r1,[r0,r4,LSL #1]
000138  3816              SUBS     r0,r0,#0x16
00013a  f8300014          LDRH     r0,[r0,r4,LSL #1]
00013e  4281              CMP      r1,r0
000140  db1c              BLT      |L1.380|
;;;90     		{
;;;91     			Count[index] += numClk;
000142  f1050058          ADD      r0,r5,#0x58
000146  f8300014          LDRH     r0,[r0,r4,LSL #1]
00014a  4430              ADD      r0,r0,r6
00014c  b281              UXTH     r1,r0
00014e  f1050058          ADD      r0,r5,#0x58
000152  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;92     		  if(Count[index] >= Top[index])
000156  f8301014          LDRH     r1,[r0,r4,LSL #1]
00015a  382c              SUBS     r0,r0,#0x2c
00015c  f8300014          LDRH     r0,[r0,r4,LSL #1]
000160  4281              CMP      r1,r0
000162  db22              BLT      |L1.426|
;;;93     		  {
;;;94     			  PinOut[index](0x02);
000164  f105009c          ADD      r0,r5,#0x9c
000168  f8501024          LDR      r1,[r0,r4,LSL #2]
00016c  2002              MOVS     r0,#2
00016e  4788              BLX      r1
;;;95     			  Count[index] = 0x0000;
000170  2100              MOVS     r1,#0
000172  f1050058          ADD      r0,r5,#0x58
000176  f8201014          STRH     r1,[r0,r4,LSL #1]
00017a  e016              B        |L1.426|
                  |L1.380|
;;;96     		  }
;;;97     		}
;;;98     		else 
;;;99     		{
;;;100    			Count[index] += numClk;
00017c  f1050058          ADD      r0,r5,#0x58
000180  f8300014          LDRH     r0,[r0,r4,LSL #1]
000184  4430              ADD      r0,r0,r6
000186  b281              UXTH     r1,r0
000188  f1050058          ADD      r0,r5,#0x58
00018c  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;101    			if(Count[index] >= Arr[index])PinOut[index](0x02);
000190  f8301014          LDRH     r1,[r0,r4,LSL #1]
000194  3816              SUBS     r0,r0,#0x16
000196  f8300014          LDRH     r0,[r0,r4,LSL #1]
00019a  4281              CMP      r1,r0
00019c  db05              BLT      |L1.426|
00019e  f105009c          ADD      r0,r5,#0x9c
0001a2  f8501024          LDR      r1,[r0,r4,LSL #2]
0001a6  2002              MOVS     r0,#2
0001a8  4788              BLX      r1
                  |L1.426|
0001aa  bf00              NOP                            ;88
                  |L1.428|
0001ac  1c60              ADDS     r0,r4,#1              ;86
0001ae  b2c4              UXTB     r4,r0                 ;86
                  |L1.432|
0001b0  2c0b              CMP      r4,#0xb               ;86
0001b2  dbb9              BLT      |L1.296|
;;;102    		}
;;;103      }
;;;104    }
0001b4  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP

0001b6  0000              DCW      0x0000
                  |L1.440|
                          DCD      0x00030d40

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001
