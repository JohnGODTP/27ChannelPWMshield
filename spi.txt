; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\spi.o --asm_dir=.\ --list_dir=.\ --depend=.\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Header_Files -I.\Header_Files\STM32F10x -I.\Source_Files -IC:\Program_Files\Keil_v5\ARM\RV31\INC -IC:\Program_Files\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Program_Files\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -DSTM32F10X_MD -DSTM32F10X_MD -D__NO_EMBEDDED_ASM --omf_browse=.\spi.crf Source_Files\spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI1_IRQHandler PROC
;;;6      
;;;7      void SPI1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;8      {
;;;9        if(SPI1->SR & SPI_SR_RXNE)SPI1_ISR();
000002  48a8              LDR      r0,|L1.676|
000004  8900              LDRH     r0,[r0,#8]
000006  f0000001          AND      r0,r0,#1
00000a  b118              CBZ      r0,|L1.20|
00000c  48a6              LDR      r0,|L1.680|
00000e  6800              LDR      r0,[r0,#0]  ; SPI1_ISR
000010  4780              BLX      r0
000012  e007              B        |L1.36|
                  |L1.20|
;;;10     	else if(SPI1->SR & SPI_SR_CRCERR)SPI1->SR = 0;
000014  48a3              LDR      r0,|L1.676|
000016  8900              LDRH     r0,[r0,#8]
000018  f0000010          AND      r0,r0,#0x10
00001c  b110              CBZ      r0,|L1.36|
00001e  2000              MOVS     r0,#0
000020  49a0              LDR      r1,|L1.676|
000022  8108              STRH     r0,[r1,#8]
                  |L1.36|
;;;11     }
000024  bd10              POP      {r4,pc}
;;;12     
                          ENDP

                  Log2 PROC
;;;13     
;;;14     U32 Log2(U32 x)
000026  4601              MOV      r1,r0
;;;15     {
;;;16     	U32 tmpInt;
;;;17     	U32 result;
;;;18     	
;;;19     	result = 0;
000028  2000              MOVS     r0,#0
;;;20     	tmpInt = 1;
00002a  2201              MOVS     r2,#1
;;;21     	while(tmpInt < x)
00002c  e001              B        |L1.50|
                  |L1.46|
;;;22     	{
;;;23     		tmpInt <<=2;
00002e  0092              LSLS     r2,r2,#2
;;;24     		result ++;
000030  1c40              ADDS     r0,r0,#1
                  |L1.50|
000032  428a              CMP      r2,r1                 ;21
000034  d3fb              BCC      |L1.46|
;;;25     	}
;;;26       return result;
;;;27     }
000036  4770              BX       lr
;;;28     
                          ENDP

                  SpiInitial PROC
;;;29     void SpiInitial(U8 NS_PLL, //2,4,8,16,32,64,128,256
000038  e92d47f0          PUSH     {r4-r10,lr}
;;;30     								BOOL master,
;;;31     								BOOL MSB_AT_FIRST,
;;;32     								BOOL CLK_STR_RISING,
;;;33     								BOOL DATA_SET_AT_LEADING,
;;;34     								void *isr)
;;;35     {
00003c  4604              MOV      r4,r0
00003e  460d              MOV      r5,r1
000040  4616              MOV      r6,r2
000042  461f              MOV      r7,r3
000044  e9dd9808          LDRD     r9,r8,[sp,#0x20]
;;;36     	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
000048  4898              LDR      r0,|L1.684|
00004a  6980              LDR      r0,[r0,#0x18]
00004c  f4405080          ORR      r0,r0,#0x1000
000050  4996              LDR      r1,|L1.684|
000052  6188              STR      r0,[r1,#0x18]
;;;37     	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;
000054  4608              MOV      r0,r1
000056  68c0              LDR      r0,[r0,#0xc]
000058  f4405080          ORR      r0,r0,#0x1000
00005c  60c8              STR      r0,[r1,#0xc]
;;;38     	_CsPinInitial();
00005e  bf00              NOP      
000060  4608              MOV      r0,r1
000062  6980              LDR      r0,[r0,#0x18]
000064  f0400004          ORR      r0,r0,#4
000068  6188              STR      r0,[r1,#0x18]
00006a  4891              LDR      r0,|L1.688|
00006c  6800              LDR      r0,[r0,#0]
00006e  f4404000          ORR      r0,r0,#0x8000
000072  498f              LDR      r1,|L1.688|
000074  6008              STR      r0,[r1,#0]
000076  488e              LDR      r0,|L1.688|
000078  380c              SUBS     r0,r0,#0xc
00007a  6800              LDR      r0,[r0,#0]
00007c  f0204040          BIC      r0,r0,#0xc0000000
000080  498b              LDR      r1,|L1.688|
000082  390c              SUBS     r1,r1,#0xc
000084  6008              STR      r0,[r1,#0]
000086  4608              MOV      r0,r1
000088  6800              LDR      r0,[r0,#0]
00008a  f0205040          BIC      r0,r0,#0x30000000
00008e  6008              STR      r0,[r1,#0]
000090  4608              MOV      r0,r1
000092  6800              LDR      r0,[r0,#0]
000094  f0404000          ORR      r0,r0,#0x80000000
000098  6008              STR      r0,[r1,#0]
00009a  bf00              NOP      
;;;39       _SckPinInitial();
00009c  bf00              NOP      
00009e  4883              LDR      r0,|L1.684|
0000a0  6980              LDR      r0,[r0,#0x18]
0000a2  f0400008          ORR      r0,r0,#8
0000a6  4981              LDR      r1,|L1.684|
0000a8  6188              STR      r0,[r1,#0x18]
0000aa  4882              LDR      r0,|L1.692|
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0400008          ORR      r0,r0,#8
0000b2  4980              LDR      r1,|L1.692|
0000b4  6008              STR      r0,[r1,#0]
0000b6  487f              LDR      r0,|L1.692|
0000b8  3810              SUBS     r0,r0,#0x10
0000ba  6800              LDR      r0,[r0,#0]
0000bc  f4204040          BIC      r0,r0,#0xc000
0000c0  497c              LDR      r1,|L1.692|
0000c2  3910              SUBS     r1,r1,#0x10
0000c4  6008              STR      r0,[r1,#0]
0000c6  4608              MOV      r0,r1
0000c8  6800              LDR      r0,[r0,#0]
0000ca  f4205040          BIC      r0,r0,#0x3000
0000ce  6008              STR      r0,[r1,#0]
0000d0  4608              MOV      r0,r1
0000d2  6800              LDR      r0,[r0,#0]
0000d4  f4404000          ORR      r0,r0,#0x8000
0000d8  6008              STR      r0,[r1,#0]
0000da  bf00              NOP      
;;;40       _MisoPinInitial();
0000dc  bf00              NOP      
0000de  4873              LDR      r0,|L1.684|
0000e0  6980              LDR      r0,[r0,#0x18]
0000e2  f0400008          ORR      r0,r0,#8
0000e6  4971              LDR      r1,|L1.684|
0000e8  6188              STR      r0,[r1,#0x18]
0000ea  4872              LDR      r0,|L1.692|
0000ec  6800              LDR      r0,[r0,#0]
0000ee  f0400010          ORR      r0,r0,#0x10
0000f2  4970              LDR      r1,|L1.692|
0000f4  6008              STR      r0,[r1,#0]
0000f6  486f              LDR      r0,|L1.692|
0000f8  3810              SUBS     r0,r0,#0x10
0000fa  6800              LDR      r0,[r0,#0]
0000fc  f4202040          BIC      r0,r0,#0xc0000
000100  496c              LDR      r1,|L1.692|
000102  3910              SUBS     r1,r1,#0x10
000104  6008              STR      r0,[r1,#0]
000106  4608              MOV      r0,r1
000108  6800              LDR      r0,[r0,#0]
00010a  f4402000          ORR      r0,r0,#0x80000
00010e  6008              STR      r0,[r1,#0]
000110  4608              MOV      r0,r1
000112  6800              LDR      r0,[r0,#0]
000114  f4403040          ORR      r0,r0,#0x30000
000118  6008              STR      r0,[r1,#0]
00011a  bf00              NOP      
;;;41       _MosiPinInitial();
00011c  bf00              NOP      
00011e  4863              LDR      r0,|L1.684|
000120  6980              LDR      r0,[r0,#0x18]
000122  f0400008          ORR      r0,r0,#8
000126  4961              LDR      r1,|L1.684|
000128  6188              STR      r0,[r1,#0x18]
00012a  4862              LDR      r0,|L1.692|
00012c  6800              LDR      r0,[r0,#0]
00012e  f0400020          ORR      r0,r0,#0x20
000132  4960              LDR      r1,|L1.692|
000134  6008              STR      r0,[r1,#0]
000136  485f              LDR      r0,|L1.692|
000138  3810              SUBS     r0,r0,#0x10
00013a  6800              LDR      r0,[r0,#0]
00013c  f4200040          BIC      r0,r0,#0xc00000
000140  495c              LDR      r1,|L1.692|
000142  3910              SUBS     r1,r1,#0x10
000144  6008              STR      r0,[r1,#0]
000146  4608              MOV      r0,r1
000148  6800              LDR      r0,[r0,#0]
00014a  f4201040          BIC      r0,r0,#0x300000
00014e  6008              STR      r0,[r1,#0]
000150  4608              MOV      r0,r1
000152  6800              LDR      r0,[r0,#0]
000154  f4400000          ORR      r0,r0,#0x800000
000158  6008              STR      r0,[r1,#0]
00015a  bf00              NOP      
;;;42     	delay_us(10);
00015c  200a              MOVS     r0,#0xa
00015e  f7fffffe          BL       delay_us
;;;43     	RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI1RST;
000162  4852              LDR      r0,|L1.684|
000164  68c0              LDR      r0,[r0,#0xc]
000166  f4205080          BIC      r0,r0,#0x1000
00016a  4950              LDR      r1,|L1.684|
00016c  60c8              STR      r0,[r1,#0xc]
;;;44     	SPI1->CR1 |= (SPI_CR1_SPE | SPI_CR1_SSM );
00016e  484d              LDR      r0,|L1.676|
000170  8800              LDRH     r0,[r0,#0]
000172  f4407010          ORR      r0,r0,#0x240
000176  494b              LDR      r1,|L1.676|
000178  8008              STRH     r0,[r1,#0]
;;;45     	if(master)SPI1->CR1 |= SPI_CR1_MSTR;
00017a  b125              CBZ      r5,|L1.390|
00017c  4608              MOV      r0,r1
00017e  8800              LDRH     r0,[r0,#0]
000180  f0400004          ORR      r0,r0,#4
000184  8008              STRH     r0,[r1,#0]
                  |L1.390|
;;;46     	if(!MSB_AT_FIRST)SPI1->CR1 |= SPI_CR1_LSBFIRST;
000186  b92e              CBNZ     r6,|L1.404|
000188  4846              LDR      r0,|L1.676|
00018a  8800              LDRH     r0,[r0,#0]
00018c  f0400080          ORR      r0,r0,#0x80
000190  4944              LDR      r1,|L1.676|
000192  8008              STRH     r0,[r1,#0]
                  |L1.404|
;;;47     	if(!CLK_STR_RISING)SPI1->CR1 |= SPI_CR1_CPOL;
000194  b92f              CBNZ     r7,|L1.418|
000196  4843              LDR      r0,|L1.676|
000198  8800              LDRH     r0,[r0,#0]
00019a  f0400002          ORR      r0,r0,#2
00019e  4941              LDR      r1,|L1.676|
0001a0  8008              STRH     r0,[r1,#0]
                  |L1.418|
;;;48     	if(!DATA_SET_AT_LEADING)SPI1->CR1 |= SPI_CR1_CPHA;
0001a2  f1b90f00          CMP      r9,#0
0001a6  d105              BNE      |L1.436|
0001a8  483e              LDR      r0,|L1.676|
0001aa  8800              LDRH     r0,[r0,#0]
0001ac  f0400001          ORR      r0,r0,#1
0001b0  493c              LDR      r1,|L1.676|
0001b2  8008              STRH     r0,[r1,#0]
                  |L1.436|
;;;49       NS_PLL = Log2(NS_PLL) & 0x07;
0001b4  4620              MOV      r0,r4
0001b6  f7fffffe          BL       Log2
0001ba  f0000407          AND      r4,r0,#7
;;;50     	if(NS_PLL)NS_PLL-=1;
0001be  b10c              CBZ      r4,|L1.452|
0001c0  1e60              SUBS     r0,r4,#1
0001c2  b2c4              UXTB     r4,r0
                  |L1.452|
;;;51     	SPI1->CR1 |= (NS_PLL <<3);
0001c4  4837              LDR      r0,|L1.676|
0001c6  8800              LDRH     r0,[r0,#0]
0001c8  ea4000c4          ORR      r0,r0,r4,LSL #3
0001cc  4935              LDR      r1,|L1.676|
0001ce  8008              STRH     r0,[r1,#0]
;;;52     	if(isr != NULL)
0001d0  f1b80f00          CMP      r8,#0
0001d4  d019              BEQ      |L1.522|
;;;53     	{
;;;54     		SPI1_ISR = (ISR)isr;
0001d6  4834              LDR      r0,|L1.680|
0001d8  f8c08000          STR      r8,[r0,#0]  ; SPI1_ISR
;;;55     		SPI1->CR2 |= (SPI_CR2_ERRIE | SPI_CR2_RXNEIE );
0001dc  4608              MOV      r0,r1
0001de  8880              LDRH     r0,[r0,#4]
0001e0  f0400060          ORR      r0,r0,#0x60
0001e4  8088              STRH     r0,[r1,#4]
;;;56     		// interrupt config
;;;57     	  NVIC->IP[35] = 0x02;
0001e6  2102              MOVS     r1,#2
0001e8  4833              LDR      r0,|L1.696|
0001ea  7001              STRB     r1,[r0,#0]
;;;58     	  NVIC->ICPR[1] |= NVIC_ICPR_CLRPEND_3;
0001ec  4833              LDR      r0,|L1.700|
0001ee  6800              LDR      r0,[r0,#0]
0001f0  f0400108          ORR      r1,r0,#8
0001f4  4831              LDR      r0,|L1.700|
0001f6  6001              STR      r1,[r0,#0]
;;;59     	  NVIC->ISER[1] |= NVIC_ISER_SETENA_3;
0001f8  4831              LDR      r0,|L1.704|
0001fa  6800              LDR      r0,[r0,#0]
0001fc  f0400008          ORR      r0,r0,#8
000200  f04f21e0          MOV      r1,#0xe000e000
000204  f8c10104          STR      r0,[r1,#0x104]
000208  e002              B        |L1.528|
                  |L1.522|
;;;60     	}
;;;61     	else SPI1_ISR = NULL;
00020a  2000              MOVS     r0,#0
00020c  4926              LDR      r1,|L1.680|
00020e  6008              STR      r0,[r1,#0]  ; SPI1_ISR
                  |L1.528|
;;;62     	
;;;63     }
000210  e8bd87f0          POP      {r4-r10,pc}
;;;64     
                          ENDP

                  SpiDisableInterrupt PROC
;;;65     
;;;66     void SpiDisableInterrupt(void)
000214  bf00              NOP      
                  |L1.534|
;;;67     {
;;;68     	while(SPI1->SR & SPI_SR_BSY)
000216  4823              LDR      r0,|L1.676|
000218  8900              LDRH     r0,[r0,#8]
00021a  f0000080          AND      r0,r0,#0x80
00021e  2800              CMP      r0,#0
000220  d1f9              BNE      |L1.534|
;;;69     	{
;;;70     		;
;;;71     	}
;;;72     	SPI1->CR2 &= ~(SPI_CR2_ERRIE | SPI_CR2_RXNEIE);
000222  4820              LDR      r0,|L1.676|
000224  8880              LDRH     r0,[r0,#4]
000226  f0200060          BIC      r0,r0,#0x60
00022a  491e              LDR      r1,|L1.676|
00022c  8088              STRH     r0,[r1,#4]
;;;73     }
00022e  4770              BX       lr
;;;74     
                          ENDP

                  SpiEnableInterrupt PROC
;;;75     void SpiEnableInterrupt(void)
000230  bf00              NOP      
                  |L1.562|
;;;76     {
;;;77     	while(SPI1->SR & SPI_SR_BSY)
000232  481c              LDR      r0,|L1.676|
000234  8900              LDRH     r0,[r0,#8]
000236  f0000080          AND      r0,r0,#0x80
00023a  2800              CMP      r0,#0
00023c  d1f9              BNE      |L1.562|
;;;78     	{
;;;79     		;
;;;80     	}
;;;81     	SPI1->CR2 |= (SPI_CR2_ERRIE | SPI_CR2_RXNEIE );
00023e  4819              LDR      r0,|L1.676|
000240  8880              LDRH     r0,[r0,#4]
000242  f0400060          ORR      r0,r0,#0x60
000246  4917              LDR      r1,|L1.676|
000248  8088              STRH     r0,[r1,#4]
;;;82     }
00024a  4770              BX       lr
;;;83     
                          ENDP

                  SpiPoll PROC
;;;84     
;;;85     BOOL SpiPoll(U8*data)
00024c  4601              MOV      r1,r0
;;;86     {
;;;87     	if(SPI1->SR & SPI_SR_RXNE)
00024e  4815              LDR      r0,|L1.676|
000250  8900              LDRH     r0,[r0,#8]
000252  f0000001          AND      r0,r0,#1
000256  b120              CBZ      r0,|L1.610|
;;;88     	{
;;;89     		*data = SPI1->DR;
000258  4812              LDR      r0,|L1.676|
00025a  8980              LDRH     r0,[r0,#0xc]
00025c  7008              STRB     r0,[r1,#0]
;;;90     		return TRUE;
00025e  2001              MOVS     r0,#1
                  |L1.608|
;;;91     	}
;;;92     	return FALSE;
;;;93     }
000260  4770              BX       lr
                  |L1.610|
000262  2000              MOVS     r0,#0                 ;92
000264  e7fc              B        |L1.608|
;;;94     
                          ENDP

                  GetSpiData PROC
;;;95     
;;;96     U8 GetSpiData(void)
000266  490f              LDR      r1,|L1.676|
;;;97     {
;;;98     	U8 Result;
;;;99     	
;;;100    	Result = SPI1->DR;
000268  8989              LDRH     r1,[r1,#0xc]
00026a  b2c8              UXTB     r0,r1
;;;101    	return Result;
;;;102    }
00026c  4770              BX       lr
;;;103    
                          ENDP

                  SpiExchangeByte PROC
;;;104    
;;;105    U8 SpiExchangeByte(U8 data)
00026e  4601              MOV      r1,r0
;;;106    {
;;;107    	U8 Result;
;;;108    	
;;;109    	SPI1->DR = data;
000270  4a0c              LDR      r2,|L1.676|
000272  8191              STRH     r1,[r2,#0xc]
;;;110      while(SPI1->SR & SPI_SR_BSY)
000274  bf00              NOP      
                  |L1.630|
000276  4a0b              LDR      r2,|L1.676|
000278  8912              LDRH     r2,[r2,#8]
00027a  f0020280          AND      r2,r2,#0x80
00027e  2a00              CMP      r2,#0
000280  d1f9              BNE      |L1.630|
;;;111    	{
;;;112    		;
;;;113    	}
;;;114    	Result = SPI1->DR;
000282  4a08              LDR      r2,|L1.676|
000284  8992              LDRH     r2,[r2,#0xc]
000286  b2d0              UXTB     r0,r2
;;;115      return Result;
;;;116    }
000288  4770              BX       lr
;;;117    
                          ENDP

                  SpiSlaveSynchronize PROC
;;;118    
;;;119    void SpiSlaveSynchronize(void)
00028a  4806              LDR      r0,|L1.676|
;;;120    {
;;;121    	SPI1->CR1 |= SPI_CR1_SSI;
00028c  8800              LDRH     r0,[r0,#0]
00028e  f4407080          ORR      r0,r0,#0x100
000292  4904              LDR      r1,|L1.676|
000294  8008              STRH     r0,[r1,#0]
;;;122    	SPI1->CR1 &= ~SPI_CR1_SSI;
000296  4608              MOV      r0,r1
000298  8800              LDRH     r0,[r0,#0]
00029a  f4207080          BIC      r0,r0,#0x100
00029e  8008              STRH     r0,[r1,#0]
;;;123    }
0002a0  4770              BX       lr
;;;124    
                          ENDP

0002a2  0000              DCW      0x0000
                  |L1.676|
                          DCD      0x40013000
                  |L1.680|
                          DCD      SPI1_ISR
                  |L1.684|
                          DCD      0x40021000
                  |L1.688|
                          DCD      0x40010810
                  |L1.692|
                          DCD      0x40010c10
                  |L1.696|
                          DCD      0xe000e423
                  |L1.700|
                          DCD      0xe000e284
                  |L1.704|
                          DCD      0xe000e104

                          AREA ||.data||, DATA, ALIGN=2

                  SPI1_ISR
                          DCD      0x00000000
