; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\hardware_pwm.o --asm_dir=.\ --list_dir=.\ --depend=.\hardware_pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Header_Files -I.\Header_Files\STM32F10x -I.\Source_Files -IC:\Program_Files\Keil_v5\ARM\RV31\INC -IC:\Program_Files\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Program_Files\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -DSTM32F10X_MD -DSTM32F10X_MD -D__NO_EMBEDDED_ASM --omf_browse=.\hardware_pwm.crf Source_Files\hardware_pwm.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN5HDPWMC2Ev                  ; Alternate entry point ; HDPWM::HDPWM__sub_object()
                  _ZN5HDPWMC1Ev PROC ; HDPWM::HDPWM()
;;;2      
;;;3      HDPWM::HDPWM()
;;;4      {
;;;5      
;;;6      }
;;;7      
000000  4770              BX       lr
                          ENDP

                  _ZN5HDPWMD2Ev                  ; Alternate entry point ; HDPWM::~HDPWM__sub_object()
                  _ZN5HDPWMD1Ev PROC ; HDPWM::~HDPWM()
;;;98     
;;;99     HDPWM::~HDPWM()
;;;100    {
;;;101    	
;;;102    }
;;;103    
000002  4770              BX       lr
                          ENDP

                  _ZN5HDPWM7InitialEjtt PROC ; HDPWM::Initial(unsigned, unsigned short, unsigned short)
;;;7      
;;;8      void HDPWM::Initial(BOOL Polarity, U16 frequency,U16 duty)
000004  e92d41f0          PUSH     {r4-r8,lr}
;;;9      {
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
00000e  4698              MOV      r8,r3
;;;10     	U8 index;
;;;11     
;;;12     	
;;;13     	//enable timer's clock
;;;14     	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
000010  48fc              LDR      r0,|L1.1028|
000012  6980              LDR      r0,[r0,#0x18]
000014  f4406000          ORR      r0,r0,#0x800
000018  49fa              LDR      r1,|L1.1028|
00001a  6188              STR      r0,[r1,#0x18]
;;;15     	RCC->APB1ENR |= (RCC_APB1ENR_TIM2EN | 
00001c  4608              MOV      r0,r1
00001e  69c0              LDR      r0,[r0,#0x1c]
000020  f0400007          ORR      r0,r0,#7
000024  61c8              STR      r0,[r1,#0x1c]
;;;16     	                 RCC_APB1ENR_TIM3EN | 
;;;17     	                 RCC_APB1ENR_TIM4EN);
;;;18     	
;;;19     	RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST | 
000026  4608              MOV      r0,r1
000028  6900              LDR      r0,[r0,#0x10]
00002a  f0400007          ORR      r0,r0,#7
00002e  6108              STR      r0,[r1,#0x10]
;;;20     	                  RCC_APB1RSTR_TIM3RST | 
;;;21     	                  RCC_APB1RSTR_TIM4RST);
;;;22     	RCC->APB2RSTR |= RCC_APB2RSTR_TIM1RST;
000030  4608              MOV      r0,r1
000032  68c0              LDR      r0,[r0,#0xc]
000034  f4406000          ORR      r0,r0,#0x800
000038  60c8              STR      r0,[r1,#0xc]
;;;23     	delay_us(10);
00003a  200a              MOVS     r0,#0xa
00003c  f7fffffe          BL       delay_us
;;;24     	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST | 
000040  48f0              LDR      r0,|L1.1028|
000042  6900              LDR      r0,[r0,#0x10]
000044  f0200007          BIC      r0,r0,#7
000048  49ee              LDR      r1,|L1.1028|
00004a  6108              STR      r0,[r1,#0x10]
;;;25     	                  RCC_APB1RSTR_TIM3RST | 
;;;26     	                  RCC_APB1RSTR_TIM4RST);
;;;27     	RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST;
00004c  4608              MOV      r0,r1
00004e  68c0              LDR      r0,[r0,#0xc]
000050  f4206000          BIC      r0,r0,#0x800
000054  60c8              STR      r0,[r1,#0xc]
;;;28     
;;;29     	for(index = 0;index <4;index ++)Timer[index] = TIM1;	
000056  2400              MOVS     r4,#0
000058  e004              B        |L1.100|
                  |L1.90|
00005a  48eb              LDR      r0,|L1.1032|
00005c  f8450024          STR      r0,[r5,r4,LSL #2]
000060  1c60              ADDS     r0,r4,#1
000062  b2c4              UXTB     r4,r0
                  |L1.100|
000064  2c04              CMP      r4,#4
000066  dbf8              BLT      |L1.90|
;;;30       //PCLK2=72MHZ
;;;31       TIM1->DIER=0x0000;//disable all interrupt enable
000068  2000              MOVS     r0,#0
00006a  49e7              LDR      r1,|L1.1032|
00006c  310c              ADDS     r1,r1,#0xc
00006e  8008              STRH     r0,[r1,#0]
;;;32     	TIM1->PSC = (U16)(TIMER1_CLK/2000000) - 1;  //0.5us/tick
000070  2023              MOVS     r0,#0x23
000072  49e5              LDR      r1,|L1.1032|
000074  3128              ADDS     r1,r1,#0x28
000076  8008              STRH     r0,[r1,#0]
;;;33       TIM1->ARR=(U16)(2000000/frequency);
000078  48e4              LDR      r0,|L1.1036|
00007a  fb90f0f7          SDIV     r0,r0,r7
00007e  1d09              ADDS     r1,r1,#4
000080  8008              STRH     r0,[r1,#0]
;;;34     	TIM1->CCER = Polarity ? 0x2222:0x0000;
000082  b116              CBZ      r6,|L1.138|
000084  f2422022          MOV      r0,#0x2222
000088  e000              B        |L1.140|
                  |L1.138|
00008a  2000              MOVS     r0,#0
                  |L1.140|
00008c  49de              LDR      r1,|L1.1032|
00008e  3120              ADDS     r1,r1,#0x20
000090  8008              STRH     r0,[r1,#0]
;;;35     	TIM1->SR = 0x0000;
000092  2000              MOVS     r0,#0
000094  49dc              LDR      r1,|L1.1032|
000096  3110              ADDS     r1,r1,#0x10
000098  8008              STRH     r0,[r1,#0]
;;;36       TIM1->CR1=0x0084;//Counter used as up
00009a  2084              MOVS     r0,#0x84
00009c  49da              LDR      r1,|L1.1032|
00009e  8008              STRH     r0,[r1,#0]
;;;37     	TIM1->CCMR1 = 0x7878;
0000a0  f6470078          MOV      r0,#0x7878
0000a4  49d8              LDR      r1,|L1.1032|
0000a6  3118              ADDS     r1,r1,#0x18
0000a8  8008              STRH     r0,[r1,#0]
;;;38     	TIM1->CCMR2 = 0x7878;
0000aa  1d09              ADDS     r1,r1,#4
0000ac  8008              STRH     r0,[r1,#0]
;;;39     	TIM1->CCR1 = ((U32)TIM1->ARR)*duty/10000;
0000ae  48d6              LDR      r0,|L1.1032|
0000b0  302c              ADDS     r0,r0,#0x2c
0000b2  8800              LDRH     r0,[r0,#0]
0000b4  fb00f008          MUL      r0,r0,r8
0000b8  f2427110          MOV      r1,#0x2710
0000bc  fbb0f0f1          UDIV     r0,r0,r1
0000c0  49d1              LDR      r1,|L1.1032|
0000c2  3134              ADDS     r1,r1,#0x34
0000c4  8008              STRH     r0,[r1,#0]
;;;40     	TIM1->CCR2 = TIM1->CCR1;
0000c6  4608              MOV      r0,r1
0000c8  8800              LDRH     r0,[r0,#0]
0000ca  1d09              ADDS     r1,r1,#4
0000cc  8008              STRH     r0,[r1,#0]
;;;41     	TIM1->CCR3 = TIM1->CCR1;
0000ce  1f08              SUBS     r0,r1,#4
0000d0  8800              LDRH     r0,[r0,#0]
0000d2  1d09              ADDS     r1,r1,#4
0000d4  8008              STRH     r0,[r1,#0]
;;;42     	TIM1->CCR4 = TIM1->CCR1;
0000d6  48cc              LDR      r0,|L1.1032|
0000d8  3034              ADDS     r0,r0,#0x34
0000da  8800              LDRH     r0,[r0,#0]
0000dc  1d09              ADDS     r1,r1,#4
0000de  8008              STRH     r0,[r1,#0]
;;;43     	TIM1->BDTR = TIM_BDTR_MOE;
0000e0  f44f4000          MOV      r0,#0x8000
0000e4  1d09              ADDS     r1,r1,#4
0000e6  8008              STRH     r0,[r1,#0]
;;;44     	//TIM1->CCER = 0x0000;
;;;45     	for(;index <8;index ++)Timer[index] = TIM2;
0000e8  e005              B        |L1.246|
                  |L1.234|
0000ea  f04f4080          MOV      r0,#0x40000000
0000ee  f8450024          STR      r0,[r5,r4,LSL #2]
0000f2  1c60              ADDS     r0,r4,#1
0000f4  b2c4              UXTB     r4,r0
                  |L1.246|
0000f6  2c08              CMP      r4,#8
0000f8  dbf7              BLT      |L1.234|
;;;46       //CLK=72MHZ
;;;47       TIM2->DIER=0x0000;//disable all interrupt enable
0000fa  2000              MOVS     r0,#0
0000fc  f04f4180          MOV      r1,#0x40000000
000100  8188              STRH     r0,[r1,#0xc]
;;;48     	TIM2->PSC = (U16)(TIMER2_CLK/2000000) - 1;  //0.5us/tick
000102  2023              MOVS     r0,#0x23
000104  8508              STRH     r0,[r1,#0x28]
;;;49       TIM2->ARR=(U16)(2000000/frequency);
000106  48c1              LDR      r0,|L1.1036|
000108  fb90f0f7          SDIV     r0,r0,r7
00010c  8588              STRH     r0,[r1,#0x2c]
;;;50     	TIM2->CCER = Polarity ? 0x2222:0x0000;
00010e  b116              CBZ      r6,|L1.278|
000110  f2422022          MOV      r0,#0x2222
000114  e000              B        |L1.280|
                  |L1.278|
000116  2000              MOVS     r0,#0
                  |L1.280|
000118  f04f4180          MOV      r1,#0x40000000
00011c  8408              STRH     r0,[r1,#0x20]
;;;51     	TIM2->SR = 0x0000;
00011e  2000              MOVS     r0,#0
000120  8208              STRH     r0,[r1,#0x10]
;;;52       TIM2->CR1=0x0084;//Counter used as up
000122  2084              MOVS     r0,#0x84
000124  8008              STRH     r0,[r1,#0]
;;;53     	TIM2->CCMR1 = 0x7878;
000126  f6470078          MOV      r0,#0x7878
00012a  8308              STRH     r0,[r1,#0x18]
;;;54     	TIM2->CCMR2 = 0x7878;
00012c  8388              STRH     r0,[r1,#0x1c]
;;;55     	TIM2->CCR1 = ((U32)TIM2->ARR)*duty/10000;
00012e  4608              MOV      r0,r1
000130  8d80              LDRH     r0,[r0,#0x2c]
000132  fb00f008          MUL      r0,r0,r8
000136  f2427110          MOV      r1,#0x2710
00013a  fbb0f0f1          UDIV     r0,r0,r1
00013e  0689              LSLS     r1,r1,#26
000140  8688              STRH     r0,[r1,#0x34]
;;;56     	TIM2->CCR2 = TIM2->CCR1;
000142  4608              MOV      r0,r1
000144  8e80              LDRH     r0,[r0,#0x34]
000146  8708              STRH     r0,[r1,#0x38]
;;;57     	TIM2->CCR3 = TIM2->CCR1;
000148  4608              MOV      r0,r1
00014a  8e80              LDRH     r0,[r0,#0x34]
00014c  8788              STRH     r0,[r1,#0x3c]
;;;58     	TIM2->CCR4 = TIM2->CCR1;
00014e  4608              MOV      r0,r1
000150  8e80              LDRH     r0,[r0,#0x34]
000152  49af              LDR      r1,|L1.1040|
000154  8008              STRH     r0,[r1,#0]
;;;59     	for(;index <12;index ++)Timer[index] = TIM3;
000156  e004              B        |L1.354|
                  |L1.344|
000158  48ae              LDR      r0,|L1.1044|
00015a  f8450024          STR      r0,[r5,r4,LSL #2]
00015e  1c60              ADDS     r0,r4,#1
000160  b2c4              UXTB     r4,r0
                  |L1.354|
000162  2c0c              CMP      r4,#0xc
000164  dbf8              BLT      |L1.344|
;;;60       //CLK=72MHZ
;;;61       TIM3->DIER=0x0000;//disable all interrupt enable
000166  2000              MOVS     r0,#0
000168  49aa              LDR      r1,|L1.1044|
00016a  310c              ADDS     r1,r1,#0xc
00016c  8008              STRH     r0,[r1,#0]
;;;62     	TIM3->PSC = (U16)(TIMER3_CLK/2000000) - 1;  //0.5us/tick
00016e  2023              MOVS     r0,#0x23
000170  49a8              LDR      r1,|L1.1044|
000172  3128              ADDS     r1,r1,#0x28
000174  8008              STRH     r0,[r1,#0]
;;;63       TIM3->ARR=(U16)(2000000/frequency);
000176  48a5              LDR      r0,|L1.1036|
000178  fb90f0f7          SDIV     r0,r0,r7
00017c  1d09              ADDS     r1,r1,#4
00017e  8008              STRH     r0,[r1,#0]
;;;64     	TIM3->CCER = Polarity ? 0x2222:0x0000;
000180  b116              CBZ      r6,|L1.392|
000182  f2422022          MOV      r0,#0x2222
000186  e000              B        |L1.394|
                  |L1.392|
000188  2000              MOVS     r0,#0
                  |L1.394|
00018a  49a2              LDR      r1,|L1.1044|
00018c  3120              ADDS     r1,r1,#0x20
00018e  8008              STRH     r0,[r1,#0]
;;;65     	TIM3->SR = 0x0000;
000190  2000              MOVS     r0,#0
000192  49a0              LDR      r1,|L1.1044|
000194  3110              ADDS     r1,r1,#0x10
000196  8008              STRH     r0,[r1,#0]
;;;66       TIM3->CR1=0x0084;//Counter used as up
000198  2084              MOVS     r0,#0x84
00019a  499e              LDR      r1,|L1.1044|
00019c  8008              STRH     r0,[r1,#0]
;;;67     	TIM3->CCMR1 = 0x7878;
00019e  f6470078          MOV      r0,#0x7878
0001a2  499c              LDR      r1,|L1.1044|
0001a4  3118              ADDS     r1,r1,#0x18
0001a6  8008              STRH     r0,[r1,#0]
;;;68     	TIM3->CCMR2 = 0x7878;
0001a8  1d09              ADDS     r1,r1,#4
0001aa  8008              STRH     r0,[r1,#0]
;;;69     	TIM3->CCR1 = ((U32)TIM3->ARR)*duty/10000;
0001ac  4899              LDR      r0,|L1.1044|
0001ae  302c              ADDS     r0,r0,#0x2c
0001b0  8800              LDRH     r0,[r0,#0]
0001b2  fb00f008          MUL      r0,r0,r8
0001b6  f2427110          MOV      r1,#0x2710
0001ba  fbb0f0f1          UDIV     r0,r0,r1
0001be  4995              LDR      r1,|L1.1044|
0001c0  3134              ADDS     r1,r1,#0x34
0001c2  8008              STRH     r0,[r1,#0]
;;;70     	TIM3->CCR2 = TIM3->CCR1;
0001c4  4608              MOV      r0,r1
0001c6  8800              LDRH     r0,[r0,#0]
0001c8  1d09              ADDS     r1,r1,#4
0001ca  8008              STRH     r0,[r1,#0]
;;;71     	TIM3->CCR3 = TIM3->CCR1;
0001cc  1f08              SUBS     r0,r1,#4
0001ce  8800              LDRH     r0,[r0,#0]
0001d0  1d09              ADDS     r1,r1,#4
0001d2  8008              STRH     r0,[r1,#0]
;;;72     	TIM3->CCR4 = TIM3->CCR1;
0001d4  488f              LDR      r0,|L1.1044|
0001d6  3034              ADDS     r0,r0,#0x34
0001d8  8800              LDRH     r0,[r0,#0]
0001da  1d09              ADDS     r1,r1,#4
0001dc  8008              STRH     r0,[r1,#0]
;;;73     	
;;;74     	for(;index <16;index ++)Timer[index] = TIM4;
0001de  e004              B        |L1.490|
                  |L1.480|
0001e0  488d              LDR      r0,|L1.1048|
0001e2  f8450024          STR      r0,[r5,r4,LSL #2]
0001e6  1c60              ADDS     r0,r4,#1
0001e8  b2c4              UXTB     r4,r0
                  |L1.490|
0001ea  2c10              CMP      r4,#0x10
0001ec  dbf8              BLT      |L1.480|
;;;75       //CLK=72MHZ
;;;76       TIM4->DIER=0x0000;//disable all interrupt enable
0001ee  2000              MOVS     r0,#0
0001f0  4989              LDR      r1,|L1.1048|
0001f2  310c              ADDS     r1,r1,#0xc
0001f4  8008              STRH     r0,[r1,#0]
;;;77     	TIM4->PSC = (U16)(TIMER4_CLK/2000000) - 1;  //0.5us/tick
0001f6  2023              MOVS     r0,#0x23
0001f8  4987              LDR      r1,|L1.1048|
0001fa  3128              ADDS     r1,r1,#0x28
0001fc  8008              STRH     r0,[r1,#0]
;;;78       TIM4->ARR=(U16)(2000000/frequency);
0001fe  4883              LDR      r0,|L1.1036|
000200  fb90f0f7          SDIV     r0,r0,r7
000204  1d09              ADDS     r1,r1,#4
000206  8008              STRH     r0,[r1,#0]
;;;79     	TIM4->CCER = Polarity ? 0x2222:0x0000;
000208  b116              CBZ      r6,|L1.528|
00020a  f2422022          MOV      r0,#0x2222
00020e  e000              B        |L1.530|
                  |L1.528|
000210  2000              MOVS     r0,#0
                  |L1.530|
000212  4981              LDR      r1,|L1.1048|
000214  3120              ADDS     r1,r1,#0x20
000216  8008              STRH     r0,[r1,#0]
;;;80     	TIM4->SR = 0x0000;
000218  2000              MOVS     r0,#0
00021a  497f              LDR      r1,|L1.1048|
00021c  3110              ADDS     r1,r1,#0x10
00021e  8008              STRH     r0,[r1,#0]
;;;81       TIM4->CR1=0x0084;//Counter used as up
000220  2084              MOVS     r0,#0x84
000222  497d              LDR      r1,|L1.1048|
000224  8008              STRH     r0,[r1,#0]
;;;82     	TIM4->CCMR1 = 0x7878;
000226  f6470078          MOV      r0,#0x7878
00022a  497b              LDR      r1,|L1.1048|
00022c  3118              ADDS     r1,r1,#0x18
00022e  8008              STRH     r0,[r1,#0]
;;;83     	TIM4->CCMR2 = 0x7878;
000230  1d09              ADDS     r1,r1,#4
000232  8008              STRH     r0,[r1,#0]
;;;84     	TIM4->CCR1 = ((U32)TIM4->ARR)*duty/10000;
000234  4878              LDR      r0,|L1.1048|
000236  302c              ADDS     r0,r0,#0x2c
000238  8800              LDRH     r0,[r0,#0]
00023a  fb00f008          MUL      r0,r0,r8
00023e  f2427110          MOV      r1,#0x2710
000242  fbb0f0f1          UDIV     r0,r0,r1
000246  4974              LDR      r1,|L1.1048|
000248  3134              ADDS     r1,r1,#0x34
00024a  8008              STRH     r0,[r1,#0]
;;;85     	TIM4->CCR2 = TIM4->CCR1;
00024c  4608              MOV      r0,r1
00024e  8800              LDRH     r0,[r0,#0]
000250  1d09              ADDS     r1,r1,#4
000252  8008              STRH     r0,[r1,#0]
;;;86     	TIM4->CCR3 = TIM4->CCR1;
000254  1f08              SUBS     r0,r1,#4
000256  8800              LDRH     r0,[r0,#0]
000258  1d09              ADDS     r1,r1,#4
00025a  8008              STRH     r0,[r1,#0]
;;;87     	TIM4->CCR4 = TIM4->CCR1;
00025c  486e              LDR      r0,|L1.1048|
00025e  3034              ADDS     r0,r0,#0x34
000260  8800              LDRH     r0,[r0,#0]
000262  1d09              ADDS     r1,r1,#4
000264  8008              STRH     r0,[r1,#0]
;;;88     	
;;;89     	TIM1->CR1 |= TIM_CR1_CEN;
000266  4868              LDR      r0,|L1.1032|
000268  8800              LDRH     r0,[r0,#0]
00026a  f0400001          ORR      r0,r0,#1
00026e  4966              LDR      r1,|L1.1032|
000270  8008              STRH     r0,[r1,#0]
;;;90     	TIM2->CR1 |= TIM_CR1_CEN;
000272  f04f4080          MOV      r0,#0x40000000
000276  8800              LDRH     r0,[r0,#0]
000278  f0400001          ORR      r0,r0,#1
00027c  f04f4180          MOV      r1,#0x40000000
000280  8008              STRH     r0,[r1,#0]
;;;91     	TIM3->CR1 |= TIM_CR1_CEN;
000282  4864              LDR      r0,|L1.1044|
000284  8800              LDRH     r0,[r0,#0]
000286  f0400001          ORR      r0,r0,#1
00028a  4962              LDR      r1,|L1.1044|
00028c  8008              STRH     r0,[r1,#0]
;;;92     	TIM4->CR1 |= TIM_CR1_CEN;
00028e  4862              LDR      r0,|L1.1048|
000290  8800              LDRH     r0,[r0,#0]
000292  f0400001          ORR      r0,r0,#1
000296  4960              LDR      r1,|L1.1048|
000298  8008              STRH     r0,[r1,#0]
;;;93     	TIM1->EGR |= TIM_EGR_UG;
00029a  485b              LDR      r0,|L1.1032|
00029c  3014              ADDS     r0,r0,#0x14
00029e  8800              LDRH     r0,[r0,#0]
0002a0  f0400001          ORR      r0,r0,#1
0002a4  4958              LDR      r1,|L1.1032|
0002a6  3114              ADDS     r1,r1,#0x14
0002a8  8008              STRH     r0,[r1,#0]
;;;94     	TIM2->EGR |= TIM_EGR_UG;
0002aa  0708              LSLS     r0,r1,#28
0002ac  8a80              LDRH     r0,[r0,#0x14]
0002ae  f0400001          ORR      r0,r0,#1
0002b2  0709              LSLS     r1,r1,#28
0002b4  8288              STRH     r0,[r1,#0x14]
;;;95     	TIM3->EGR |= TIM_EGR_UG;
0002b6  4857              LDR      r0,|L1.1044|
0002b8  3014              ADDS     r0,r0,#0x14
0002ba  8800              LDRH     r0,[r0,#0]
0002bc  f0400001          ORR      r0,r0,#1
0002c0  4954              LDR      r1,|L1.1044|
0002c2  3114              ADDS     r1,r1,#0x14
0002c4  8008              STRH     r0,[r1,#0]
;;;96     	TIM4->EGR |= TIM_EGR_UG;
0002c6  4854              LDR      r0,|L1.1048|
0002c8  3014              ADDS     r0,r0,#0x14
0002ca  8800              LDRH     r0,[r0,#0]
0002cc  f0400001          ORR      r0,r0,#1
0002d0  4951              LDR      r1,|L1.1048|
0002d2  3114              ADDS     r1,r1,#0x14
0002d4  8008              STRH     r0,[r1,#0]
;;;97     }
0002d6  e8bd81f0          POP      {r4-r8,pc}
;;;98     
                          ENDP

                  _ZN5HDPWM6EnableEh PROC ; HDPWM::Enable(unsigned char)
;;;103    
;;;104    void HDPWM::Enable(U8 index)
0002da  b510              PUSH     {r4,lr}
;;;105    {
0002dc  4602              MOV      r2,r0
;;;106    	Timer[index]->CCER |= 1<<(index%4*4);
0002de  4608              MOV      r0,r1
0002e0  17cb              ASRS     r3,r1,#31
0002e2  eb017393          ADD      r3,r1,r3,LSR #30
0002e6  109b              ASRS     r3,r3,#2
0002e8  eba10383          SUB      r3,r1,r3,LSL #2
0002ec  009c              LSLS     r4,r3,#2
0002ee  2301              MOVS     r3,#1
0002f0  40a3              LSLS     r3,r3,r4
0002f2  f8524021          LDR      r4,[r2,r1,LSL #2]
0002f6  8c24              LDRH     r4,[r4,#0x20]
0002f8  4323              ORRS     r3,r3,r4
0002fa  f8524021          LDR      r4,[r2,r1,LSL #2]
0002fe  8423              STRH     r3,[r4,#0x20]
;;;107    }
000300  bd10              POP      {r4,pc}
;;;108    
                          ENDP

                  _ZN5HDPWM7DisableEh PROC ; HDPWM::Disable(unsigned char)
;;;109    void HDPWM::Disable(U8 index)
000302  b510              PUSH     {r4,lr}
;;;110    {
000304  4602              MOV      r2,r0
;;;111    	Timer[index]->CCER &= ~1<<(index%4*4);
000306  4608              MOV      r0,r1
000308  17cb              ASRS     r3,r1,#31
00030a  eb017393          ADD      r3,r1,r3,LSR #30
00030e  109b              ASRS     r3,r3,#2
000310  eba10383          SUB      r3,r1,r3,LSL #2
000314  009c              LSLS     r4,r3,#2
000316  f06f0301          MVN      r3,#1
00031a  40a3              LSLS     r3,r3,r4
00031c  f8524021          LDR      r4,[r2,r1,LSL #2]
000320  8c24              LDRH     r4,[r4,#0x20]
000322  4023              ANDS     r3,r3,r4
000324  f8524021          LDR      r4,[r2,r1,LSL #2]
000328  8423              STRH     r3,[r4,#0x20]
;;;112    }
00032a  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  _ZN5HDPWM7SetDutyEht PROC ; HDPWM::SetDuty(unsigned char, unsigned short)
;;;114    void HDPWM::SetDuty(U8 index,U16 duty)
00032c  b510              PUSH     {r4,lr}
;;;115    {
;;;116    	switch(index % 0x04)
00032e  460b              MOV      r3,r1
000330  17cc              ASRS     r4,r1,#31
000332  eb017494          ADD      r4,r1,r4,LSR #30
000336  10a4              ASRS     r4,r4,#2
000338  eba10484          SUB      r4,r1,r4,LSL #2
00033c  b134              CBZ      r4,|L1.844|
00033e  2c01              CMP      r4,#1
000340  d010              BEQ      |L1.868|
000342  2c02              CMP      r4,#2
000344  d01a              BEQ      |L1.892|
000346  2c03              CMP      r4,#3
000348  d131              BNE      |L1.942|
00034a  e023              B        |L1.916|
                  |L1.844|
;;;117    	{
;;;118    		case 0:
;;;119    			Timer[index]->CCR1 = (U32)Timer[index]->ARR*duty/10000;
00034c  f8503021          LDR      r3,[r0,r1,LSL #2]
000350  8d9b              LDRH     r3,[r3,#0x2c]
000352  4353              MULS     r3,r2,r3
000354  f2427410          MOV      r4,#0x2710
000358  fbb3f3f4          UDIV     r3,r3,r4
00035c  f8504021          LDR      r4,[r0,r1,LSL #2]
000360  86a3              STRH     r3,[r4,#0x34]
;;;120    		  break;
000362  e025              B        |L1.944|
                  |L1.868|
;;;121    		
;;;122    		case 1:
;;;123    			Timer[index]->CCR2 = (U32)Timer[index]->ARR*duty/10000;
000364  f8503021          LDR      r3,[r0,r1,LSL #2]
000368  8d9b              LDRH     r3,[r3,#0x2c]
00036a  4353              MULS     r3,r2,r3
00036c  f2427410          MOV      r4,#0x2710
000370  fbb3f3f4          UDIV     r3,r3,r4
000374  f8504021          LDR      r4,[r0,r1,LSL #2]
000378  8723              STRH     r3,[r4,#0x38]
;;;124    		  break;
00037a  e019              B        |L1.944|
                  |L1.892|
;;;125    		
;;;126    		case 2:
;;;127    			Timer[index]->CCR3 = (U32)Timer[index]->ARR*duty/10000;
00037c  f8503021          LDR      r3,[r0,r1,LSL #2]
000380  8d9b              LDRH     r3,[r3,#0x2c]
000382  4353              MULS     r3,r2,r3
000384  f2427410          MOV      r4,#0x2710
000388  fbb3f3f4          UDIV     r3,r3,r4
00038c  f8504021          LDR      r4,[r0,r1,LSL #2]
000390  87a3              STRH     r3,[r4,#0x3c]
;;;128    		  break;
000392  e00d              B        |L1.944|
                  |L1.916|
;;;129    		
;;;130    		case 3:
;;;131    			Timer[index]->CCR4 = (U32)Timer[index]->ARR*duty/10000;
000394  f8503021          LDR      r3,[r0,r1,LSL #2]
000398  8d9b              LDRH     r3,[r3,#0x2c]
00039a  4353              MULS     r3,r2,r3
00039c  f2427410          MOV      r4,#0x2710
0003a0  fbb3f3f4          UDIV     r3,r3,r4
0003a4  f8504021          LDR      r4,[r0,r1,LSL #2]
0003a8  f8a43040          STRH     r3,[r4,#0x40]
;;;132    		  break;
0003ac  e000              B        |L1.944|
                  |L1.942|
;;;133    		
;;;134    		default:break;
0003ae  bf00              NOP      
                  |L1.944|
0003b0  bf00              NOP                            ;120
;;;135    	}
;;;136    	Timer[index]->EGR |= TIM_EGR_UG;
0003b2  f8503021          LDR      r3,[r0,r1,LSL #2]
0003b6  8a9b              LDRH     r3,[r3,#0x14]
0003b8  f0430301          ORR      r3,r3,#1
0003bc  f8504021          LDR      r4,[r0,r1,LSL #2]
0003c0  82a3              STRH     r3,[r4,#0x14]
;;;137    }
0003c2  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  _ZN5HDPWM12SetFrequencyEht PROC ; HDPWM::SetFrequency(unsigned char, unsigned short)
;;;140    
;;;141    void HDPWM::SetFrequency(U8 index,U16 frequency)
0003c4  b510              PUSH     {r4,lr}
;;;142    {
;;;143    	Timer[index]->ARR=(U16)(2000000/frequency);
0003c6  4b11              LDR      r3,|L1.1036|
0003c8  fb93f3f2          SDIV     r3,r3,r2
0003cc  f8504021          LDR      r4,[r0,r1,LSL #2]
0003d0  85a3              STRH     r3,[r4,#0x2c]
;;;144    	Timer[index]->EGR |= TIM_EGR_UG;
0003d2  f8503021          LDR      r3,[r0,r1,LSL #2]
0003d6  8a9b              LDRH     r3,[r3,#0x14]
0003d8  f0430301          ORR      r3,r3,#1
0003dc  f8504021          LDR      r4,[r0,r1,LSL #2]
0003e0  82a3              STRH     r3,[r4,#0x14]
;;;145    }
0003e2  bd10              POP      {r4,pc}
;;;146    
                          ENDP

                  _ZN5HDPWM11SetPolarityEhj PROC ; HDPWM::SetPolarity(unsigned char, unsigned)
;;;147    void HDPWM::SetPolarity(U8 index,BOOL Polarity)
0003e4  b510              PUSH     {r4,lr}
;;;148    {
;;;149    	switch(index % 0x04)
0003e6  460b              MOV      r3,r1
0003e8  17cc              ASRS     r4,r1,#31
0003ea  eb017494          ADD      r4,r1,r4,LSR #30
0003ee  10a4              ASRS     r4,r4,#2
0003f0  eba10484          SUB      r4,r1,r4,LSL #2
0003f4  b194              CBZ      r4,|L1.1052|
0003f6  2c01              CMP      r4,#1
0003f8  d019              BEQ      |L1.1070|
0003fa  2c02              CMP      r4,#2
0003fc  d020              BEQ      |L1.1088|
0003fe  2c03              CMP      r4,#3
000400  d130              BNE      |L1.1124|
000402  e026              B        |L1.1106|
                  |L1.1028|
                          DCD      0x40021000
                  |L1.1032|
                          DCD      0x40012c00
                  |L1.1036|
                          DCD      0x001e8480
                  |L1.1040|
                          DCD      0x40000040
                  |L1.1044|
                          DCD      0x40000400
                  |L1.1048|
                          DCD      0x40000800
                  |L1.1052|
;;;150    	{
;;;151    		case 0:
;;;152    			__SFR_IO_BIT(((int)Timer[index]+VALUE_OFFSET_IN_STRUCT(TIM_TypeDef,CCER)),1) = Polarity;
00041c  f8503021          LDR      r3,[r0,r1,LSL #2]
000420  3320              ADDS     r3,r3,#0x20
000422  f04f4484          MOV      r4,#0x42000000
000426  eb041343          ADD      r3,r4,r3,LSL #5
00042a  605a              STR      r2,[r3,#4]
;;;153    		  break;
00042c  e01b              B        |L1.1126|
                  |L1.1070|
;;;154    		
;;;155    		case 1:
;;;156    			__SFR_IO_BIT(((int)Timer[index]+VALUE_OFFSET_IN_STRUCT(TIM_TypeDef,CCER)),5) = Polarity;
00042e  f8503021          LDR      r3,[r0,r1,LSL #2]
000432  3320              ADDS     r3,r3,#0x20
000434  f04f4484          MOV      r4,#0x42000000
000438  eb041343          ADD      r3,r4,r3,LSL #5
00043c  615a              STR      r2,[r3,#0x14]
;;;157    		  break;
00043e  e012              B        |L1.1126|
                  |L1.1088|
;;;158    		
;;;159    		case 2:
;;;160    			__SFR_IO_BIT(((int)Timer[index]+VALUE_OFFSET_IN_STRUCT(TIM_TypeDef,CCER)),9) = Polarity;
000440  f8503021          LDR      r3,[r0,r1,LSL #2]
000444  3320              ADDS     r3,r3,#0x20
000446  f04f4484          MOV      r4,#0x42000000
00044a  eb041343          ADD      r3,r4,r3,LSL #5
00044e  625a              STR      r2,[r3,#0x24]
;;;161    		  break;
000450  e009              B        |L1.1126|
                  |L1.1106|
;;;162    		
;;;163    		case 3:
;;;164    			__SFR_IO_BIT(((int)Timer[index]+VALUE_OFFSET_IN_STRUCT(TIM_TypeDef,CCER)),13) = Polarity;
000452  f8503021          LDR      r3,[r0,r1,LSL #2]
000456  3320              ADDS     r3,r3,#0x20
000458  f04f4484          MOV      r4,#0x42000000
00045c  eb041343          ADD      r3,r4,r3,LSL #5
000460  635a              STR      r2,[r3,#0x34]
;;;165    		  break;
000462  e000              B        |L1.1126|
                  |L1.1124|
;;;166    		
;;;167    		default:break;
000464  bf00              NOP      
                  |L1.1126|
000466  bf00              NOP                            ;153
;;;168    	}
;;;169    	Timer[index]->EGR |= TIM_EGR_UG;
000468  f8503021          LDR      r3,[r0,r1,LSL #2]
00046c  8a9b              LDRH     r3,[r3,#0x14]
00046e  f0430301          ORR      r3,r3,#1
000472  f8504021          LDR      r4,[r0,r1,LSL #2]
000476  82a3              STRH     r3,[r4,#0x14]
;;;170    }
000478  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001
