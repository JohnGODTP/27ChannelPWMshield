; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\main.o --asm_dir=.\ --list_dir=.\ --depend=.\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Header_Files -I.\Header_Files\STM32F10x -I.\Source_Files -IC:\Program_Files\Keil_v5\ARM\RV31\INC -IC:\Program_Files\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Program_Files\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -DSTM32F10X_MD -DSTM32F10X_MD -D__NO_EMBEDDED_ASM --omf_browse=.\main.crf Source_Files\main.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z7Spi1ISRv PROC ; Spi1ISR()
;;;65     
;;;66     void Spi1ISR(void)
000000  b538              PUSH     {r3-r5,lr}
;;;67     {
;;;68     	U8 data;
;;;69     	
;;;70     	SpiFifo.Push(GetSpiData());
000002  f7fffffe          BL       GetSpiData
000006  4604              MOV      r4,r0
000008  4621              MOV      r1,r4
00000a  48fe              LDR      r0,|L1.1028|
00000c  f7fffffe          BL       _ZN10RingBufferIhE4PushEh ; RingBuffer<unsigned char>::Push(unsigned char)
;;;71     	while(SpiPoll(&data))SpiFifo.Push(data);
000010  e004              B        |L1.28|
                  |L1.18|
000012  f89d1000          LDRB     r1,[sp,#0]
000016  48fb              LDR      r0,|L1.1028|
000018  f7fffffe          BL       _ZN10RingBufferIhE4PushEh ; RingBuffer<unsigned char>::Push(unsigned char)
                  |L1.28|
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       SpiPoll
000022  2800              CMP      r0,#0
000024  d1f5              BNE      |L1.18|
;;;72     }
000026  bd38              POP      {r3-r5,pc}
;;;73     
                          ENDP

                  _Z6RccCfgv PROC ; RccCfg()
;;;76     
;;;77     void RccCfg(void)
000028  2083              MOVS     r0,#0x83
;;;78     {
;;;79     	//reset register value
;;;80     	RCC->CR= 0x00000083;
00002a  49f7              LDR      r1,|L1.1032|
00002c  6008              STR      r0,[r1,#0]
;;;81     	RCC->CFGR = 0x00000000;
00002e  2000              MOVS     r0,#0
000030  6048              STR      r0,[r1,#4]
;;;82     	RCC->CIR = 0x009f0000;
000032  f44f001f          MOV      r0,#0x9f0000
000036  6088              STR      r0,[r1,#8]
;;;83     	RCC->APB2RSTR = 0xFFFFFFFF;
000038  f04f30ff          MOV      r0,#0xffffffff
00003c  60c8              STR      r0,[r1,#0xc]
;;;84     	RCC->APB1RSTR = 0xFFFFFFFF;
00003e  6108              STR      r0,[r1,#0x10]
;;;85     	RCC->AHBENR = 0x00000014;
000040  2014              MOVS     r0,#0x14
000042  6148              STR      r0,[r1,#0x14]
;;;86     	RCC->APB2ENR = 0x00000000;
000044  2000              MOVS     r0,#0
000046  6188              STR      r0,[r1,#0x18]
;;;87     	RCC->APB1ENR = 0x00000000;
000048  61c8              STR      r0,[r1,#0x1c]
;;;88     	RCC->BDCR = 0x01000000;	
00004a  f04f7080          MOV      r0,#0x1000000
00004e  6208              STR      r0,[r1,#0x20]
;;;89     	//enable HSE  enable Clock security system 
;;;90     	RCC->CR |= (RCC_CR_HSEON | RCC_CR_CSSON);
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]
000054  f4402010          ORR      r0,r0,#0x90000
000058  6008              STR      r0,[r1,#0]
;;;91     	// Wait till HSE is ready
;;;92     	while((RCC->CR & RCC_CR_HSERDY)==0){}
00005a  bf00              NOP      
                  |L1.92|
00005c  48ea              LDR      r0,|L1.1032|
00005e  6800              LDR      r0,[r0,#0]
000060  f4003000          AND      r0,r0,#0x20000
000064  2800              CMP      r0,#0
000066  d0f9              BEQ      |L1.92|
;;;93       // Enable Prefetch Buffer
;;;94       FLASH->ACR &= 0xFFFFFFE0;
000068  48e8              LDR      r0,|L1.1036|
00006a  6800              LDR      r0,[r0,#0]
00006c  f020001f          BIC      r0,r0,#0x1f
000070  49e6              LDR      r1,|L1.1036|
000072  6008              STR      r0,[r1,#0]
;;;95       FLASH->ACR |= (FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_2);
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f0400012          ORR      r0,r0,#0x12
00007c  6008              STR      r0,[r1,#0]
;;;96     	//8*9=72MHZ,HSE oscillator clock selected as PLL input clock,APB low-speed prescaler 2	
;;;97     	RCC->CFGR |= (RCC_CFGR_PLLMULL9 | 
00007e  48e2              LDR      r0,|L1.1032|
000080  6840              LDR      r0,[r0,#4]
000082  49e3              LDR      r1,|L1.1040|
000084  4308              ORRS     r0,r0,r1
000086  49e0              LDR      r1,|L1.1032|
000088  6048              STR      r0,[r1,#4]
;;;98     		            RCC_CFGR_PLLSRC | 
;;;99     		            RCC_CFGR_PPRE2_DIV1 | 
;;;100    		            RCC_CFGR_PPRE1_DIV2 |
;;;101    		            RCC_CFGR_HPRE_DIV1);	
;;;102    	//enable pll
;;;103    	RCC->CR |= RCC_CR_PLLON;	
00008a  4608              MOV      r0,r1
00008c  6800              LDR      r0,[r0,#0]
00008e  f0407080          ORR      r0,r0,#0x1000000
000092  6008              STR      r0,[r1,#0]
;;;104    	// Wait PLL lock
;;;105    	while((RCC->CR & RCC_CR_PLLRDY)==0){}	
000094  bf00              NOP      
                  |L1.150|
000096  48dc              LDR      r0,|L1.1032|
000098  6800              LDR      r0,[r0,#0]
00009a  f0007000          AND      r0,r0,#0x2000000
00009e  2800              CMP      r0,#0
0000a0  d0f9              BEQ      |L1.150|
;;;106      //clock switch
;;;107    	RCC->CFGR |= RCC_CFGR_SW_PLL;
0000a2  48d9              LDR      r0,|L1.1032|
0000a4  6840              LDR      r0,[r0,#4]
0000a6  f0400002          ORR      r0,r0,#2
0000aa  49d7              LDR      r1,|L1.1032|
0000ac  6048              STR      r0,[r1,#4]
;;;108      //wait for switch
;;;109    	while((RCC->CFGR & RCC_CFGR_SWS)!= RCC_CFGR_SWS_PLL){;}	
0000ae  bf00              NOP      
                  |L1.176|
0000b0  48d5              LDR      r0,|L1.1032|
0000b2  6840              LDR      r0,[r0,#4]
0000b4  f000000c          AND      r0,r0,#0xc
0000b8  2808              CMP      r0,#8
0000ba  d1f9              BNE      |L1.176|
;;;110      //reset end		
;;;111      RCC->APB2RSTR = 0x00000000;
0000bc  2000              MOVS     r0,#0
0000be  49d2              LDR      r1,|L1.1032|
0000c0  60c8              STR      r0,[r1,#0xc]
;;;112    	RCC->APB1RSTR = 0x00000000;		
0000c2  6108              STR      r0,[r1,#0x10]
;;;113    }
0000c4  4770              BX       lr
;;;114    
                          ENDP

                  _Z7AfIoCfgv PROC ; AfIoCfg()
;;;115    //alternate-function I/Os
;;;116    void AfIoCfg(void)
0000c6  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	//reset register value
;;;119    	RCC->APB2RSTR |= RCC_APB2RSTR_AFIORST;
0000c8  48cf              LDR      r0,|L1.1032|
0000ca  68c0              LDR      r0,[r0,#0xc]
0000cc  f0400001          ORR      r0,r0,#1
0000d0  49cd              LDR      r1,|L1.1032|
0000d2  60c8              STR      r0,[r1,#0xc]
;;;120    	delay_us(10);
0000d4  200a              MOVS     r0,#0xa
0000d6  f7fffffe          BL       delay_us
;;;121    	RCC->APB2RSTR &= (~RCC_APB2RSTR_AFIORST);
0000da  48cb              LDR      r0,|L1.1032|
0000dc  68c0              LDR      r0,[r0,#0xc]
0000de  f0200001          BIC      r0,r0,#1
0000e2  49c9              LDR      r1,|L1.1032|
0000e4  60c8              STR      r0,[r1,#0xc]
;;;122      delay_us(10);
0000e6  200a              MOVS     r0,#0xa
0000e8  f7fffffe          BL       delay_us
;;;123    	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //enable AFIO clk 
0000ec  48c6              LDR      r0,|L1.1032|
0000ee  6980              LDR      r0,[r0,#0x18]
0000f0  f0400001          ORR      r0,r0,#1
0000f4  49c4              LDR      r1,|L1.1032|
0000f6  6188              STR      r0,[r1,#0x18]
;;;124    	delay_us(10);
0000f8  200a              MOVS     r0,#0xa
0000fa  f7fffffe          BL       delay_us
;;;125      AFIO->MAPR = ((2<<24)|(1<<0));//disable jtag and remap spi1 (NSS/PA15, SCK/PB3, MISO/PB4, MOSI/PB5)
0000fe  48c5              LDR      r0,|L1.1044|
000100  49c5              LDR      r1,|L1.1048|
000102  6048              STR      r0,[r1,#4]
;;;126    }
000104  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  _Z7GpioCfgv PROC ; GpioCfg()
;;;128    void GpioCfg(void)
000106  b510              PUSH     {r4,lr}
;;;129    {
;;;130    	//reset register value
;;;131    	RCC->APB2RSTR |= (RCC_APB2RSTR_IOPARST | RCC_APB2RSTR_IOPBRST | 
000108  48bf              LDR      r0,|L1.1032|
00010a  68c0              LDR      r0,[r0,#0xc]
00010c  f040003c          ORR      r0,r0,#0x3c
000110  49bd              LDR      r1,|L1.1032|
000112  60c8              STR      r0,[r1,#0xc]
;;;132    	                  RCC_APB2RSTR_IOPCRST | RCC_APB2RSTR_IOPDRST);
;;;133    	delay_us(10);
000114  200a              MOVS     r0,#0xa
000116  f7fffffe          BL       delay_us
;;;134    	RCC->APB2RSTR &= (~(RCC_APB2RSTR_IOPARST | RCC_APB2RSTR_IOPBRST | 
00011a  48bb              LDR      r0,|L1.1032|
00011c  68c0              LDR      r0,[r0,#0xc]
00011e  f020003c          BIC      r0,r0,#0x3c
000122  49b9              LDR      r1,|L1.1032|
000124  60c8              STR      r0,[r1,#0xc]
;;;135    	                  RCC_APB2RSTR_IOPCRST | RCC_APB2RSTR_IOPDRST));
;;;136    	
;;;137    	
;;;138    	_Pwm0PinInitial();
000126  bf00              NOP      
000128  4608              MOV      r0,r1
00012a  6980              LDR      r0,[r0,#0x18]
00012c  f0400008          ORR      r0,r0,#8
000130  6188              STR      r0,[r1,#0x18]
000132  48ba              LDR      r0,|L1.1052|
000134  6800              LDR      r0,[r0,#0]
000136  f4404080          ORR      r0,r0,#0x4000
00013a  49b8              LDR      r1,|L1.1052|
00013c  6008              STR      r0,[r1,#0]
00013e  48b7              LDR      r0,|L1.1052|
000140  380c              SUBS     r0,r0,#0xc
000142  6800              LDR      r0,[r0,#0]
000144  f0206040          BIC      r0,r0,#0xc000000
000148  49b4              LDR      r1,|L1.1052|
00014a  390c              SUBS     r1,r1,#0xc
00014c  6008              STR      r0,[r1,#0]
00014e  4608              MOV      r0,r1
000150  6800              LDR      r0,[r0,#0]
000152  f0407040          ORR      r0,r0,#0x3000000
000156  6008              STR      r0,[r1,#0]
000158  bf00              NOP      
;;;139    	_Pwm1PinInitial();
00015a  bf00              NOP      
00015c  48aa              LDR      r0,|L1.1032|
00015e  6980              LDR      r0,[r0,#0x18]
000160  f0400008          ORR      r0,r0,#8
000164  49a8              LDR      r1,|L1.1032|
000166  6188              STR      r0,[r1,#0x18]
000168  48ac              LDR      r0,|L1.1052|
00016a  6800              LDR      r0,[r0,#0]
00016c  f4404000          ORR      r0,r0,#0x8000
000170  49aa              LDR      r1,|L1.1052|
000172  6008              STR      r0,[r1,#0]
000174  48a9              LDR      r0,|L1.1052|
000176  380c              SUBS     r0,r0,#0xc
000178  6800              LDR      r0,[r0,#0]
00017a  f0204040          BIC      r0,r0,#0xc0000000
00017e  49a7              LDR      r1,|L1.1052|
000180  390c              SUBS     r1,r1,#0xc
000182  6008              STR      r0,[r1,#0]
000184  4608              MOV      r0,r1
000186  6800              LDR      r0,[r0,#0]
000188  f0405040          ORR      r0,r0,#0x30000000
00018c  6008              STR      r0,[r1,#0]
00018e  bf00              NOP      
;;;140    	_Pwm2PinInitial();
000190  bf00              NOP      
000192  489d              LDR      r0,|L1.1032|
000194  6980              LDR      r0,[r0,#0x18]
000196  f0400008          ORR      r0,r0,#8
00019a  499b              LDR      r1,|L1.1032|
00019c  6188              STR      r0,[r1,#0x18]
00019e  489f              LDR      r0,|L1.1052|
0001a0  6800              LDR      r0,[r0,#0]
0001a2  f0400002          ORR      r0,r0,#2
0001a6  499d              LDR      r1,|L1.1052|
0001a8  6008              STR      r0,[r1,#0]
0001aa  489c              LDR      r0,|L1.1052|
0001ac  3810              SUBS     r0,r0,#0x10
0001ae  6800              LDR      r0,[r0,#0]
0001b0  f02000c0          BIC      r0,r0,#0xc0
0001b4  4999              LDR      r1,|L1.1052|
0001b6  3910              SUBS     r1,r1,#0x10
0001b8  6008              STR      r0,[r1,#0]
0001ba  4608              MOV      r0,r1
0001bc  6800              LDR      r0,[r0,#0]
0001be  f0400080          ORR      r0,r0,#0x80
0001c2  6008              STR      r0,[r1,#0]
0001c4  4608              MOV      r0,r1
0001c6  6800              LDR      r0,[r0,#0]
0001c8  f0400030          ORR      r0,r0,#0x30
0001cc  6008              STR      r0,[r1,#0]
0001ce  bf00              NOP      
;;;141    	_Pwm3PinInitial();
0001d0  bf00              NOP      
0001d2  488d              LDR      r0,|L1.1032|
0001d4  6980              LDR      r0,[r0,#0x18]
0001d6  f0400008          ORR      r0,r0,#8
0001da  498b              LDR      r1,|L1.1032|
0001dc  6188              STR      r0,[r1,#0x18]
0001de  488f              LDR      r0,|L1.1052|
0001e0  6800              LDR      r0,[r0,#0]
0001e2  f0400001          ORR      r0,r0,#1
0001e6  498d              LDR      r1,|L1.1052|
0001e8  6008              STR      r0,[r1,#0]
0001ea  488c              LDR      r0,|L1.1052|
0001ec  3810              SUBS     r0,r0,#0x10
0001ee  6800              LDR      r0,[r0,#0]
0001f0  f020000c          BIC      r0,r0,#0xc
0001f4  4989              LDR      r1,|L1.1052|
0001f6  3910              SUBS     r1,r1,#0x10
0001f8  6008              STR      r0,[r1,#0]
0001fa  4608              MOV      r0,r1
0001fc  6800              LDR      r0,[r0,#0]
0001fe  f0400008          ORR      r0,r0,#8
000202  6008              STR      r0,[r1,#0]
000204  4608              MOV      r0,r1
000206  6800              LDR      r0,[r0,#0]
000208  f0400003          ORR      r0,r0,#3
00020c  6008              STR      r0,[r1,#0]
00020e  bf00              NOP      
;;;142    	_Pwm4PinInitial();
000210  bf00              NOP      
000212  487d              LDR      r0,|L1.1032|
000214  6980              LDR      r0,[r0,#0x18]
000216  f0400004          ORR      r0,r0,#4
00021a  497b              LDR      r1,|L1.1032|
00021c  6188              STR      r0,[r1,#0x18]
00021e  4880              LDR      r0,|L1.1056|
000220  6800              LDR      r0,[r0,#0]
000222  f0400080          ORR      r0,r0,#0x80
000226  497e              LDR      r1,|L1.1056|
000228  6008              STR      r0,[r1,#0]
00022a  487d              LDR      r0,|L1.1056|
00022c  3810              SUBS     r0,r0,#0x10
00022e  6800              LDR      r0,[r0,#0]
000230  f0204040          BIC      r0,r0,#0xc0000000
000234  497a              LDR      r1,|L1.1056|
000236  3910              SUBS     r1,r1,#0x10
000238  6008              STR      r0,[r1,#0]
00023a  4608              MOV      r0,r1
00023c  6800              LDR      r0,[r0,#0]
00023e  f0404000          ORR      r0,r0,#0x80000000
000242  6008              STR      r0,[r1,#0]
000244  4608              MOV      r0,r1
000246  6800              LDR      r0,[r0,#0]
000248  f0405040          ORR      r0,r0,#0x30000000
00024c  6008              STR      r0,[r1,#0]
00024e  bf00              NOP      
;;;143    	_Pwm5PinInitial();
000250  bf00              NOP      
000252  486d              LDR      r0,|L1.1032|
000254  6980              LDR      r0,[r0,#0x18]
000256  f0400004          ORR      r0,r0,#4
00025a  496b              LDR      r1,|L1.1032|
00025c  6188              STR      r0,[r1,#0x18]
00025e  4870              LDR      r0,|L1.1056|
000260  6800              LDR      r0,[r0,#0]
000262  f0400010          ORR      r0,r0,#0x10
000266  496e              LDR      r1,|L1.1056|
000268  6008              STR      r0,[r1,#0]
00026a  486d              LDR      r0,|L1.1056|
00026c  3810              SUBS     r0,r0,#0x10
00026e  6800              LDR      r0,[r0,#0]
000270  f4202040          BIC      r0,r0,#0xc0000
000274  496a              LDR      r1,|L1.1056|
000276  3910              SUBS     r1,r1,#0x10
000278  6008              STR      r0,[r1,#0]
00027a  4608              MOV      r0,r1
00027c  6800              LDR      r0,[r0,#0]
00027e  f4403040          ORR      r0,r0,#0x30000
000282  6008              STR      r0,[r1,#0]
000284  bf00              NOP      
;;;144    	_Pwm6PinInitial();
000286  bf00              NOP      
000288  485f              LDR      r0,|L1.1032|
00028a  6980              LDR      r0,[r0,#0x18]
00028c  f0400004          ORR      r0,r0,#4
000290  495d              LDR      r1,|L1.1032|
000292  6188              STR      r0,[r1,#0x18]
000294  4862              LDR      r0,|L1.1056|
000296  6800              LDR      r0,[r0,#0]
000298  f0400020          ORR      r0,r0,#0x20
00029c  4960              LDR      r1,|L1.1056|
00029e  6008              STR      r0,[r1,#0]
0002a0  485f              LDR      r0,|L1.1056|
0002a2  3810              SUBS     r0,r0,#0x10
0002a4  6800              LDR      r0,[r0,#0]
0002a6  f4200040          BIC      r0,r0,#0xc00000
0002aa  495d              LDR      r1,|L1.1056|
0002ac  3910              SUBS     r1,r1,#0x10
0002ae  6008              STR      r0,[r1,#0]
0002b0  4608              MOV      r0,r1
0002b2  6800              LDR      r0,[r0,#0]
0002b4  f4401040          ORR      r0,r0,#0x300000
0002b8  6008              STR      r0,[r1,#0]
0002ba  bf00              NOP      
;;;145    	_Pwm7PinInitial();
0002bc  bf00              NOP      
0002be  4852              LDR      r0,|L1.1032|
0002c0  6980              LDR      r0,[r0,#0x18]
0002c2  f0400004          ORR      r0,r0,#4
0002c6  4950              LDR      r1,|L1.1032|
0002c8  6188              STR      r0,[r1,#0x18]
0002ca  4855              LDR      r0,|L1.1056|
0002cc  6800              LDR      r0,[r0,#0]
0002ce  f0400040          ORR      r0,r0,#0x40
0002d2  4953              LDR      r1,|L1.1056|
0002d4  6008              STR      r0,[r1,#0]
0002d6  4852              LDR      r0,|L1.1056|
0002d8  3810              SUBS     r0,r0,#0x10
0002da  6800              LDR      r0,[r0,#0]
0002dc  f0206040          BIC      r0,r0,#0xc000000
0002e0  494f              LDR      r1,|L1.1056|
0002e2  3910              SUBS     r1,r1,#0x10
0002e4  6008              STR      r0,[r1,#0]
0002e6  4608              MOV      r0,r1
0002e8  6800              LDR      r0,[r0,#0]
0002ea  f0406000          ORR      r0,r0,#0x8000000
0002ee  6008              STR      r0,[r1,#0]
0002f0  4608              MOV      r0,r1
0002f2  6800              LDR      r0,[r0,#0]
0002f4  f0407040          ORR      r0,r0,#0x3000000
0002f8  6008              STR      r0,[r1,#0]
0002fa  bf00              NOP      
;;;146    	
;;;147    	_Pwm8PinInitial();
0002fc  bf00              NOP      
0002fe  4842              LDR      r0,|L1.1032|
000300  6980              LDR      r0,[r0,#0x18]
000302  f0400004          ORR      r0,r0,#4
000306  4940              LDR      r1,|L1.1032|
000308  6188              STR      r0,[r1,#0x18]
00030a  4845              LDR      r0,|L1.1056|
00030c  6800              LDR      r0,[r0,#0]
00030e  f0400001          ORR      r0,r0,#1
000312  4943              LDR      r1,|L1.1056|
000314  6008              STR      r0,[r1,#0]
000316  4842              LDR      r0,|L1.1056|
000318  3810              SUBS     r0,r0,#0x10
00031a  6800              LDR      r0,[r0,#0]
00031c  f020000c          BIC      r0,r0,#0xc
000320  493f              LDR      r1,|L1.1056|
000322  3910              SUBS     r1,r1,#0x10
000324  6008              STR      r0,[r1,#0]
000326  4608              MOV      r0,r1
000328  6800              LDR      r0,[r0,#0]
00032a  f0400008          ORR      r0,r0,#8
00032e  6008              STR      r0,[r1,#0]
000330  4608              MOV      r0,r1
000332  6800              LDR      r0,[r0,#0]
000334  f0400003          ORR      r0,r0,#3
000338  6008              STR      r0,[r1,#0]
00033a  bf00              NOP      
;;;148    	_Pwm9PinInitial();
00033c  bf00              NOP      
00033e  4832              LDR      r0,|L1.1032|
000340  6980              LDR      r0,[r0,#0x18]
000342  f0400004          ORR      r0,r0,#4
000346  4930              LDR      r1,|L1.1032|
000348  6188              STR      r0,[r1,#0x18]
00034a  4835              LDR      r0,|L1.1056|
00034c  6800              LDR      r0,[r0,#0]
00034e  f0400002          ORR      r0,r0,#2
000352  4933              LDR      r1,|L1.1056|
000354  6008              STR      r0,[r1,#0]
000356  4832              LDR      r0,|L1.1056|
000358  3810              SUBS     r0,r0,#0x10
00035a  6800              LDR      r0,[r0,#0]
00035c  f02000c0          BIC      r0,r0,#0xc0
000360  492f              LDR      r1,|L1.1056|
000362  3910              SUBS     r1,r1,#0x10
000364  6008              STR      r0,[r1,#0]
000366  4608              MOV      r0,r1
000368  6800              LDR      r0,[r0,#0]
00036a  f0400080          ORR      r0,r0,#0x80
00036e  6008              STR      r0,[r1,#0]
000370  4608              MOV      r0,r1
000372  6800              LDR      r0,[r0,#0]
000374  f0400030          ORR      r0,r0,#0x30
000378  6008              STR      r0,[r1,#0]
00037a  bf00              NOP      
;;;149    	_Pwm10PinInitial();
00037c  bf00              NOP      
00037e  4822              LDR      r0,|L1.1032|
000380  6980              LDR      r0,[r0,#0x18]
000382  f0400004          ORR      r0,r0,#4
000386  4920              LDR      r1,|L1.1032|
000388  6188              STR      r0,[r1,#0x18]
00038a  4825              LDR      r0,|L1.1056|
00038c  6800              LDR      r0,[r0,#0]
00038e  f0400008          ORR      r0,r0,#8
000392  4923              LDR      r1,|L1.1056|
000394  6008              STR      r0,[r1,#0]
000396  4822              LDR      r0,|L1.1056|
000398  3810              SUBS     r0,r0,#0x10
00039a  6800              LDR      r0,[r0,#0]
00039c  f4204040          BIC      r0,r0,#0xc000
0003a0  491f              LDR      r1,|L1.1056|
0003a2  3910              SUBS     r1,r1,#0x10
0003a4  6008              STR      r0,[r1,#0]
0003a6  4608              MOV      r0,r1
0003a8  6800              LDR      r0,[r0,#0]
0003aa  f4404000          ORR      r0,r0,#0x8000
0003ae  6008              STR      r0,[r1,#0]
0003b0  4608              MOV      r0,r1
0003b2  6800              LDR      r0,[r0,#0]
0003b4  f4405040          ORR      r0,r0,#0x3000
0003b8  6008              STR      r0,[r1,#0]
0003ba  bf00              NOP      
;;;150    	_Pwm11PinInitial();
0003bc  bf00              NOP      
0003be  4812              LDR      r0,|L1.1032|
0003c0  6980              LDR      r0,[r0,#0x18]
0003c2  f0400004          ORR      r0,r0,#4
0003c6  4910              LDR      r1,|L1.1032|
0003c8  6188              STR      r0,[r1,#0x18]
0003ca  4815              LDR      r0,|L1.1056|
0003cc  6800              LDR      r0,[r0,#0]
0003ce  f0400004          ORR      r0,r0,#4
0003d2  4913              LDR      r1,|L1.1056|
0003d4  6008              STR      r0,[r1,#0]
0003d6  4812              LDR      r0,|L1.1056|
0003d8  3810              SUBS     r0,r0,#0x10
0003da  6800              LDR      r0,[r0,#0]
0003dc  f4206040          BIC      r0,r0,#0xc00
0003e0  490f              LDR      r1,|L1.1056|
0003e2  3910              SUBS     r1,r1,#0x10
0003e4  6008              STR      r0,[r1,#0]
0003e6  4608              MOV      r0,r1
0003e8  6800              LDR      r0,[r0,#0]
0003ea  f4406000          ORR      r0,r0,#0x800
0003ee  6008              STR      r0,[r1,#0]
0003f0  4608              MOV      r0,r1
0003f2  6800              LDR      r0,[r0,#0]
0003f4  f4407040          ORR      r0,r0,#0x300
0003f8  6008              STR      r0,[r1,#0]
0003fa  bf00              NOP      
;;;151    	_Pwm12PinInitial();
0003fc  bf00              NOP      
0003fe  4802              LDR      r0,|L1.1032|
000400  6980              LDR      r0,[r0,#0x18]
000402  e00f              B        |L1.1060|
                  |L1.1028|
                          DCD      SpiFifo
                  |L1.1032|
                          DCD      0x40021000
                  |L1.1036|
                          DCD      0x40022000
                  |L1.1040|
                          DCD      0x001d0400
                  |L1.1044|
                          DCD      0x02000001
                  |L1.1048|
                          DCD      0x40010000
                  |L1.1052|
                          DCD      0x40010c10
                  |L1.1056|
                          DCD      0x40010810
                  |L1.1060|
000424  f0400010          ORR      r0,r0,#0x10
000428  49f8              LDR      r1,|L1.2060|
00042a  6188              STR      r0,[r1,#0x18]
00042c  48f8              LDR      r0,|L1.2064|
00042e  6900              LDR      r0,[r0,#0x10]
000430  f4405000          ORR      r0,r0,#0x2000
000434  49f6              LDR      r1,|L1.2064|
000436  6108              STR      r0,[r1,#0x10]
000438  4608              MOV      r0,r1
00043a  6840              LDR      r0,[r0,#4]
00043c  f4200040          BIC      r0,r0,#0xc00000
000440  6048              STR      r0,[r1,#4]
000442  4608              MOV      r0,r1
000444  6840              LDR      r0,[r0,#4]
000446  f4401040          ORR      r0,r0,#0x300000
00044a  6048              STR      r0,[r1,#4]
00044c  bf00              NOP      
;;;152    	_Pwm13PinInitial();
00044e  bf00              NOP      
000450  48ee              LDR      r0,|L1.2060|
000452  6980              LDR      r0,[r0,#0x18]
000454  f0400010          ORR      r0,r0,#0x10
000458  49ec              LDR      r1,|L1.2060|
00045a  6188              STR      r0,[r1,#0x18]
00045c  48ec              LDR      r0,|L1.2064|
00045e  6900              LDR      r0,[r0,#0x10]
000460  f4404080          ORR      r0,r0,#0x4000
000464  49ea              LDR      r1,|L1.2064|
000466  6108              STR      r0,[r1,#0x10]
000468  4608              MOV      r0,r1
00046a  6840              LDR      r0,[r0,#4]
00046c  f0206040          BIC      r0,r0,#0xc000000
000470  6048              STR      r0,[r1,#4]
000472  4608              MOV      r0,r1
000474  6840              LDR      r0,[r0,#4]
000476  f0407040          ORR      r0,r0,#0x3000000
00047a  6048              STR      r0,[r1,#4]
00047c  bf00              NOP      
;;;153    	_Pwm14PinInitial();
00047e  bf00              NOP      
000480  48e2              LDR      r0,|L1.2060|
000482  6980              LDR      r0,[r0,#0x18]
000484  f0400010          ORR      r0,r0,#0x10
000488  49e0              LDR      r1,|L1.2060|
00048a  6188              STR      r0,[r1,#0x18]
00048c  48e0              LDR      r0,|L1.2064|
00048e  6900              LDR      r0,[r0,#0x10]
000490  f4404000          ORR      r0,r0,#0x8000
000494  49de              LDR      r1,|L1.2064|
000496  6108              STR      r0,[r1,#0x10]
000498  4608              MOV      r0,r1
00049a  6840              LDR      r0,[r0,#4]
00049c  f0204040          BIC      r0,r0,#0xc0000000
0004a0  6048              STR      r0,[r1,#4]
0004a2  4608              MOV      r0,r1
0004a4  6840              LDR      r0,[r0,#4]
0004a6  f0405040          ORR      r0,r0,#0x30000000
0004aa  6048              STR      r0,[r1,#4]
0004ac  bf00              NOP      
;;;154    	_Pwm15PinInitial();
0004ae  bf00              NOP      
0004b0  48d6              LDR      r0,|L1.2060|
0004b2  6980              LDR      r0,[r0,#0x18]
0004b4  f0400008          ORR      r0,r0,#8
0004b8  49d4              LDR      r1,|L1.2060|
0004ba  6188              STR      r0,[r1,#0x18]
0004bc  48d5              LDR      r0,|L1.2068|
0004be  6800              LDR      r0,[r0,#0]
0004c0  f4405000          ORR      r0,r0,#0x2000
0004c4  49d3              LDR      r1,|L1.2068|
0004c6  6008              STR      r0,[r1,#0]
0004c8  48d2              LDR      r0,|L1.2068|
0004ca  380c              SUBS     r0,r0,#0xc
0004cc  6800              LDR      r0,[r0,#0]
0004ce  f4200040          BIC      r0,r0,#0xc00000
0004d2  49d0              LDR      r1,|L1.2068|
0004d4  390c              SUBS     r1,r1,#0xc
0004d6  6008              STR      r0,[r1,#0]
0004d8  4608              MOV      r0,r1
0004da  6800              LDR      r0,[r0,#0]
0004dc  f4401040          ORR      r0,r0,#0x300000
0004e0  6008              STR      r0,[r1,#0]
0004e2  bf00              NOP      
;;;155    	
;;;156    	_Pwm16PinInitial();
0004e4  bf00              NOP      
0004e6  48c9              LDR      r0,|L1.2060|
0004e8  6980              LDR      r0,[r0,#0x18]
0004ea  f0400004          ORR      r0,r0,#4
0004ee  49c7              LDR      r1,|L1.2060|
0004f0  6188              STR      r0,[r1,#0x18]
0004f2  48c9              LDR      r0,|L1.2072|
0004f4  6800              LDR      r0,[r0,#0]
0004f6  f4405080          ORR      r0,r0,#0x1000
0004fa  49c7              LDR      r1,|L1.2072|
0004fc  6008              STR      r0,[r1,#0]
0004fe  48c6              LDR      r0,|L1.2072|
000500  380c              SUBS     r0,r0,#0xc
000502  6800              LDR      r0,[r0,#0]
000504  f4202040          BIC      r0,r0,#0xc0000
000508  49c3              LDR      r1,|L1.2072|
00050a  390c              SUBS     r1,r1,#0xc
00050c  6008              STR      r0,[r1,#0]
00050e  4608              MOV      r0,r1
000510  6800              LDR      r0,[r0,#0]
000512  f4403040          ORR      r0,r0,#0x30000
000516  6008              STR      r0,[r1,#0]
000518  bf00              NOP      
;;;157    	_Pwm17PinInitial();
00051a  bf00              NOP      
00051c  48bb              LDR      r0,|L1.2060|
00051e  6980              LDR      r0,[r0,#0x18]
000520  f0400004          ORR      r0,r0,#4
000524  49b9              LDR      r1,|L1.2060|
000526  6188              STR      r0,[r1,#0x18]
000528  48bb              LDR      r0,|L1.2072|
00052a  6800              LDR      r0,[r0,#0]
00052c  f4406000          ORR      r0,r0,#0x800
000530  49b9              LDR      r1,|L1.2072|
000532  6008              STR      r0,[r1,#0]
000534  48b8              LDR      r0,|L1.2072|
000536  380c              SUBS     r0,r0,#0xc
000538  6800              LDR      r0,[r0,#0]
00053a  f4204040          BIC      r0,r0,#0xc000
00053e  49b6              LDR      r1,|L1.2072|
000540  390c              SUBS     r1,r1,#0xc
000542  6008              STR      r0,[r1,#0]
000544  4608              MOV      r0,r1
000546  6800              LDR      r0,[r0,#0]
000548  f4404000          ORR      r0,r0,#0x8000
00054c  6008              STR      r0,[r1,#0]
00054e  4608              MOV      r0,r1
000550  6800              LDR      r0,[r0,#0]
000552  f4405040          ORR      r0,r0,#0x3000
000556  6008              STR      r0,[r1,#0]
000558  bf00              NOP      
;;;158    	_Pwm18PinInitial();
00055a  bf00              NOP      
00055c  48ab              LDR      r0,|L1.2060|
00055e  6980              LDR      r0,[r0,#0x18]
000560  f0400004          ORR      r0,r0,#4
000564  49a9              LDR      r1,|L1.2060|
000566  6188              STR      r0,[r1,#0x18]
000568  48ab              LDR      r0,|L1.2072|
00056a  6800              LDR      r0,[r0,#0]
00056c  f4406080          ORR      r0,r0,#0x400
000570  49a9              LDR      r1,|L1.2072|
000572  6008              STR      r0,[r1,#0]
000574  48a8              LDR      r0,|L1.2072|
000576  380c              SUBS     r0,r0,#0xc
000578  6800              LDR      r0,[r0,#0]
00057a  f4206040          BIC      r0,r0,#0xc00
00057e  49a6              LDR      r1,|L1.2072|
000580  390c              SUBS     r1,r1,#0xc
000582  6008              STR      r0,[r1,#0]
000584  4608              MOV      r0,r1
000586  6800              LDR      r0,[r0,#0]
000588  f4406000          ORR      r0,r0,#0x800
00058c  6008              STR      r0,[r1,#0]
00058e  4608              MOV      r0,r1
000590  6800              LDR      r0,[r0,#0]
000592  f4407040          ORR      r0,r0,#0x300
000596  6008              STR      r0,[r1,#0]
000598  bf00              NOP      
;;;159    	_Pwm19PinInitial();
00059a  bf00              NOP      
00059c  489b              LDR      r0,|L1.2060|
00059e  6980              LDR      r0,[r0,#0x18]
0005a0  f0400004          ORR      r0,r0,#4
0005a4  4999              LDR      r1,|L1.2060|
0005a6  6188              STR      r0,[r1,#0x18]
0005a8  489b              LDR      r0,|L1.2072|
0005aa  6800              LDR      r0,[r0,#0]
0005ac  f4407000          ORR      r0,r0,#0x200
0005b0  4999              LDR      r1,|L1.2072|
0005b2  6008              STR      r0,[r1,#0]
0005b4  4898              LDR      r0,|L1.2072|
0005b6  380c              SUBS     r0,r0,#0xc
0005b8  6800              LDR      r0,[r0,#0]
0005ba  f02000c0          BIC      r0,r0,#0xc0
0005be  4996              LDR      r1,|L1.2072|
0005c0  390c              SUBS     r1,r1,#0xc
0005c2  6008              STR      r0,[r1,#0]
0005c4  4608              MOV      r0,r1
0005c6  6800              LDR      r0,[r0,#0]
0005c8  f0400080          ORR      r0,r0,#0x80
0005cc  6008              STR      r0,[r1,#0]
0005ce  4608              MOV      r0,r1
0005d0  6800              LDR      r0,[r0,#0]
0005d2  f0400030          ORR      r0,r0,#0x30
0005d6  6008              STR      r0,[r1,#0]
0005d8  bf00              NOP      
;;;160    	_Pwm20PinInitial();
0005da  bf00              NOP      
0005dc  488b              LDR      r0,|L1.2060|
0005de  6980              LDR      r0,[r0,#0x18]
0005e0  f0400004          ORR      r0,r0,#4
0005e4  4989              LDR      r1,|L1.2060|
0005e6  6188              STR      r0,[r1,#0x18]
0005e8  488b              LDR      r0,|L1.2072|
0005ea  6800              LDR      r0,[r0,#0]
0005ec  f4407080          ORR      r0,r0,#0x100
0005f0  4989              LDR      r1,|L1.2072|
0005f2  6008              STR      r0,[r1,#0]
0005f4  4888              LDR      r0,|L1.2072|
0005f6  380c              SUBS     r0,r0,#0xc
0005f8  6800              LDR      r0,[r0,#0]
0005fa  f020000c          BIC      r0,r0,#0xc
0005fe  4986              LDR      r1,|L1.2072|
000600  390c              SUBS     r1,r1,#0xc
000602  6008              STR      r0,[r1,#0]
000604  4608              MOV      r0,r1
000606  6800              LDR      r0,[r0,#0]
000608  f0400008          ORR      r0,r0,#8
00060c  6008              STR      r0,[r1,#0]
00060e  4608              MOV      r0,r1
000610  6800              LDR      r0,[r0,#0]
000612  f0400003          ORR      r0,r0,#3
000616  6008              STR      r0,[r1,#0]
000618  bf00              NOP      
;;;161    	_Pwm21PinInitial();
00061a  bf00              NOP      
00061c  487b              LDR      r0,|L1.2060|
00061e  6980              LDR      r0,[r0,#0x18]
000620  f0400008          ORR      r0,r0,#8
000624  4979              LDR      r1,|L1.2060|
000626  6188              STR      r0,[r1,#0x18]
000628  487a              LDR      r0,|L1.2068|
00062a  6800              LDR      r0,[r0,#0]
00062c  f4405080          ORR      r0,r0,#0x1000
000630  4978              LDR      r1,|L1.2068|
000632  6008              STR      r0,[r1,#0]
000634  4877              LDR      r0,|L1.2068|
000636  380c              SUBS     r0,r0,#0xc
000638  6800              LDR      r0,[r0,#0]
00063a  f4202040          BIC      r0,r0,#0xc0000
00063e  4975              LDR      r1,|L1.2068|
000640  390c              SUBS     r1,r1,#0xc
000642  6008              STR      r0,[r1,#0]
000644  4608              MOV      r0,r1
000646  6800              LDR      r0,[r0,#0]
000648  f4403040          ORR      r0,r0,#0x30000
00064c  6008              STR      r0,[r1,#0]
00064e  bf00              NOP      
;;;162    	_Pwm22PinInitial();
000650  bf00              NOP      
000652  486e              LDR      r0,|L1.2060|
000654  6980              LDR      r0,[r0,#0x18]
000656  f0400008          ORR      r0,r0,#8
00065a  496c              LDR      r1,|L1.2060|
00065c  6188              STR      r0,[r1,#0x18]
00065e  486d              LDR      r0,|L1.2068|
000660  6800              LDR      r0,[r0,#0]
000662  f4407080          ORR      r0,r0,#0x100
000666  496b              LDR      r1,|L1.2068|
000668  6008              STR      r0,[r1,#0]
00066a  486a              LDR      r0,|L1.2068|
00066c  380c              SUBS     r0,r0,#0xc
00066e  6800              LDR      r0,[r0,#0]
000670  f020000c          BIC      r0,r0,#0xc
000674  4967              LDR      r1,|L1.2068|
000676  390c              SUBS     r1,r1,#0xc
000678  6008              STR      r0,[r1,#0]
00067a  4608              MOV      r0,r1
00067c  6800              LDR      r0,[r0,#0]
00067e  f0400008          ORR      r0,r0,#8
000682  6008              STR      r0,[r1,#0]
000684  4608              MOV      r0,r1
000686  6800              LDR      r0,[r0,#0]
000688  f0400003          ORR      r0,r0,#3
00068c  6008              STR      r0,[r1,#0]
00068e  bf00              NOP      
;;;163    	_Pwm23PinInitial();
000690  bf00              NOP      
000692  485e              LDR      r0,|L1.2060|
000694  6980              LDR      r0,[r0,#0x18]
000696  f0400008          ORR      r0,r0,#8
00069a  495c              LDR      r1,|L1.2060|
00069c  6188              STR      r0,[r1,#0x18]
00069e  485d              LDR      r0,|L1.2068|
0006a0  6800              LDR      r0,[r0,#0]
0006a2  f0400080          ORR      r0,r0,#0x80
0006a6  495b              LDR      r1,|L1.2068|
0006a8  6008              STR      r0,[r1,#0]
0006aa  485a              LDR      r0,|L1.2068|
0006ac  3810              SUBS     r0,r0,#0x10
0006ae  6800              LDR      r0,[r0,#0]
0006b0  f0204040          BIC      r0,r0,#0xc0000000
0006b4  4957              LDR      r1,|L1.2068|
0006b6  3910              SUBS     r1,r1,#0x10
0006b8  6008              STR      r0,[r1,#0]
0006ba  4608              MOV      r0,r1
0006bc  6800              LDR      r0,[r0,#0]
0006be  f0404000          ORR      r0,r0,#0x80000000
0006c2  6008              STR      r0,[r1,#0]
0006c4  4608              MOV      r0,r1
0006c6  6800              LDR      r0,[r0,#0]
0006c8  f0405040          ORR      r0,r0,#0x30000000
0006cc  6008              STR      r0,[r1,#0]
0006ce  bf00              NOP      
;;;164    	
;;;165    	_Pwm24PinInitial();
0006d0  bf00              NOP      
0006d2  484e              LDR      r0,|L1.2060|
0006d4  6980              LDR      r0,[r0,#0x18]
0006d6  f0400008          ORR      r0,r0,#8
0006da  494c              LDR      r1,|L1.2060|
0006dc  6188              STR      r0,[r1,#0x18]
0006de  484d              LDR      r0,|L1.2068|
0006e0  6800              LDR      r0,[r0,#0]
0006e2  f4407000          ORR      r0,r0,#0x200
0006e6  494b              LDR      r1,|L1.2068|
0006e8  6008              STR      r0,[r1,#0]
0006ea  484a              LDR      r0,|L1.2068|
0006ec  380c              SUBS     r0,r0,#0xc
0006ee  6800              LDR      r0,[r0,#0]
0006f0  f02000c0          BIC      r0,r0,#0xc0
0006f4  4947              LDR      r1,|L1.2068|
0006f6  390c              SUBS     r1,r1,#0xc
0006f8  6008              STR      r0,[r1,#0]
0006fa  4608              MOV      r0,r1
0006fc  6800              LDR      r0,[r0,#0]
0006fe  f0400080          ORR      r0,r0,#0x80
000702  6008              STR      r0,[r1,#0]
000704  4608              MOV      r0,r1
000706  6800              LDR      r0,[r0,#0]
000708  f0400030          ORR      r0,r0,#0x30
00070c  6008              STR      r0,[r1,#0]
00070e  bf00              NOP      
;;;166    	_Pwm25PinInitial();
000710  bf00              NOP      
000712  483e              LDR      r0,|L1.2060|
000714  6980              LDR      r0,[r0,#0x18]
000716  f0400008          ORR      r0,r0,#8
00071a  493c              LDR      r1,|L1.2060|
00071c  6188              STR      r0,[r1,#0x18]
00071e  483d              LDR      r0,|L1.2068|
000720  6800              LDR      r0,[r0,#0]
000722  f0400040          ORR      r0,r0,#0x40
000726  493b              LDR      r1,|L1.2068|
000728  6008              STR      r0,[r1,#0]
00072a  483a              LDR      r0,|L1.2068|
00072c  3810              SUBS     r0,r0,#0x10
00072e  6800              LDR      r0,[r0,#0]
000730  f0206040          BIC      r0,r0,#0xc000000
000734  4937              LDR      r1,|L1.2068|
000736  3910              SUBS     r1,r1,#0x10
000738  6008              STR      r0,[r1,#0]
00073a  4608              MOV      r0,r1
00073c  6800              LDR      r0,[r0,#0]
00073e  f0406000          ORR      r0,r0,#0x8000000
000742  6008              STR      r0,[r1,#0]
000744  4608              MOV      r0,r1
000746  6800              LDR      r0,[r0,#0]
000748  f0407040          ORR      r0,r0,#0x3000000
00074c  6008              STR      r0,[r1,#0]
00074e  bf00              NOP      
;;;167    	_Pwm26PinInitial();
000750  bf00              NOP      
000752  482e              LDR      r0,|L1.2060|
000754  6980              LDR      r0,[r0,#0x18]
000756  f0400008          ORR      r0,r0,#8
00075a  492c              LDR      r1,|L1.2060|
00075c  6188              STR      r0,[r1,#0x18]
00075e  482d              LDR      r0,|L1.2068|
000760  6800              LDR      r0,[r0,#0]
000762  f0400004          ORR      r0,r0,#4
000766  492b              LDR      r1,|L1.2068|
000768  6008              STR      r0,[r1,#0]
00076a  482a              LDR      r0,|L1.2068|
00076c  3810              SUBS     r0,r0,#0x10
00076e  6800              LDR      r0,[r0,#0]
000770  f4206040          BIC      r0,r0,#0xc00
000774  4927              LDR      r1,|L1.2068|
000776  3910              SUBS     r1,r1,#0x10
000778  6008              STR      r0,[r1,#0]
00077a  4608              MOV      r0,r1
00077c  6800              LDR      r0,[r0,#0]
00077e  f4407040          ORR      r0,r0,#0x300
000782  6008              STR      r0,[r1,#0]
000784  bf00              NOP      
;;;168    }
000786  bd10              POP      {r4,pc}
;;;169    
                          ENDP

                  main PROC
;;;170    
;;;171    int main(int argc,char**arg)
000788  b086              SUB      sp,sp,#0x18
;;;172    {
;;;173      U32 UartRxCnt;
;;;174    	U8  Index;
;;;175    	U32 tmpTcnt;
;;;176    	U32 TcntHistory;
;;;177    	U32 tmpInt0;
;;;178    	U32 tmpInt1;
;;;179    	U32 Count;
;;;180    	U8  CheckSum ;
;;;181      U8  MSgCount;
;;;182      U32 CntForMsg;
;;;183      U8  Cmd[MSG_MAX_LENGTH];
;;;184      MessageState_t MessageState;
;;;185      
;;;186    	RccCfg();
00078a  f7fffffe          BL       _Z6RccCfgv ; RccCfg()
;;;187    	AfIoCfg();
00078e  f7fffffe          BL       _Z7AfIoCfgv ; AfIoCfg()
;;;188    	GpioCfg();
000792  f7fffffe          BL       _Z7GpioCfgv ; GpioCfg()
;;;189    	Index = 0x00;
000796  2500              MOVS     r5,#0
;;;190    	CntForMsg = 0x00000000;
000798  2000              MOVS     r0,#0
00079a  9004              STR      r0,[sp,#0x10]
;;;191      SpiFifo.SetBuffer((U8*)CmdBuffer,sizeof(CmdBuffer));
00079c  f44f6280          MOV      r2,#0x400
0007a0  491e              LDR      r1,|L1.2076|
0007a2  481f              LDR      r0,|L1.2080|
0007a4  f7fffffe          BL       _ZN10RingBufferIhE9SetBufferEPhj ; RingBuffer<unsigned char>::SetBuffer(unsigned char*, unsigned)
;;;192    	memset((char*)Cmd,0,sizeof(Cmd));
0007a8  2000              MOVS     r0,#0
0007aa  9002              STR      r0,[sp,#8]
0007ac  9003              STR      r0,[sp,#0xc]
;;;193      memset((char*)CmdBuffer,0,sizeof(CmdBuffer));
0007ae  f44f6180          MOV      r1,#0x400
0007b2  481a              LDR      r0,|L1.2076|
0007b4  f7fffffe          BL       __aeabi_memclr4
;;;194    	SpiInitial(2, //2,4,8,16,32,64,128,256
0007b8  f2af70bb          ADR      r0,_Z7Spi1ISRv + 1 ; Spi1ISR()
0007bc  2101              MOVS     r1,#1
0007be  460b              MOV      r3,r1
0007c0  460a              MOV      r2,r1
0007c2  e9cd1000          STRD     r1,r0,[sp,#0]
0007c6  2100              MOVS     r1,#0
0007c8  2002              MOVS     r0,#2
0007ca  f7fffffe          BL       SpiInitial
;;;195    						SLAVE,
;;;196    						FMSB,
;;;197    						CLK_START_EDGE_RISING,
;;;198    						DATA_SET_AT_LEADING_EDGE,
;;;199    						(void *)Spi1ISR);
;;;200    	Count = 0;
0007ce  46a8              MOV      r8,r5
;;;201    	tmpInt0 = 0;
0007d0  46aa              MOV      r10,r5
;;;202    	tmpInt1 = 0;
0007d2  46ab              MOV      r11,r5
;;;203      CheckSum = 0;
0007d4  2000              MOVS     r0,#0
0007d6  9005              STR      r0,[sp,#0x14]
;;;204      MSgCount = 0;
0007d8  2700              MOVS     r7,#0
;;;205      hdPwm.Initial();
0007da  f44f73fa          MOV      r3,#0x1f4
0007de  2232              MOVS     r2,#0x32
0007e0  2101              MOVS     r1,#1
0007e2  4810              LDR      r0,|L1.2084|
0007e4  f7fffffe          BL       _ZN5HDPWM7InitialEjtt ; HDPWM::Initial(unsigned, unsigned short, unsigned short)
;;;206      MessageState = MSG_IDLE;
0007e8  46a9              MOV      r9,r5
;;;207    	TcntHistory = TIM1->CNT;
0007ea  480f              LDR      r0,|L1.2088|
0007ec  8806              LDRH     r6,[r0,#0]
;;;208      
;;;209    	while(1)
0007ee  e0c1              B        |L1.2420|
                  |L1.2032|
;;;210    	{
;;;211    		tmpTcnt = TIM1->CNT;
0007f0  480d              LDR      r0,|L1.2088|
0007f2  8804              LDRH     r4,[r0,#0]
;;;212        if(TcntHistory != tmpTcnt)
0007f4  42a6              CMP      r6,r4
0007f6  d027              BEQ      |L1.2120|
;;;213        {
;;;214          if(TcntHistory > tmpTcnt) tmpInt0 = tmpTcnt + TIM1->ARR - TcntHistory + tmpInt1;  
0007f8  42a6              CMP      r6,r4
0007fa  d917              BLS      |L1.2092|
0007fc  480a              LDR      r0,|L1.2088|
0007fe  3008              ADDS     r0,r0,#8
000800  8800              LDRH     r0,[r0,#0]
000802  4420              ADD      r0,r0,r4
000804  1b80              SUBS     r0,r0,r6
000806  eb000a0b          ADD      r10,r0,r11
00080a  e014              B        |L1.2102|
                  |L1.2060|
                          DCD      0x40021000
                  |L1.2064|
                          DCD      0x40011000
                  |L1.2068|
                          DCD      0x40010c10
                  |L1.2072|
                          DCD      0x40010810
                  |L1.2076|
                          DCD      CmdBuffer
                  |L1.2080|
                          DCD      SpiFifo
                  |L1.2084|
                          DCD      hdPwm
                  |L1.2088|
                          DCD      0x40012c24
                  |L1.2092|
;;;215          else if(TcntHistory < tmpTcnt)tmpInt0 = tmpTcnt - TcntHistory + tmpInt1;
00082c  42a6              CMP      r6,r4
00082e  d202              BCS      |L1.2102|
000830  1ba0              SUBS     r0,r4,r6
000832  eb000a0b          ADD      r10,r0,r11
                  |L1.2102|
;;;216          tmpInt1 = tmpInt0%10;
000836  200a              MOVS     r0,#0xa
000838  fbbaf1f0          UDIV     r1,r10,r0
00083c  fb00ab11          MLS      r11,r0,r1,r10
;;;217          Count += tmpInt0/10;
000840  fbbaf0f0          UDIV     r0,r10,r0
000844  4480              ADD      r8,r8,r0
;;;218          TcntHistory = tmpTcnt;
000846  4626              MOV      r6,r4
                  |L1.2120|
;;;219        }
;;;220    		if(Count)
000848  f1b80f00          CMP      r8,#0
00084c  d010              BEQ      |L1.2160|
;;;221    		{
;;;222    			pwm.RunningTask(Count);
00084e  4641              MOV      r1,r8
000850  484e              LDR      r0,|L1.2444|
000852  f7fffffe          BL       _ZN3PWM11RunningTaskEj ; PWM::RunningTask(unsigned)
;;;223    			Count = 0;
000856  f04f0800          MOV      r8,#0
;;;224    			if(MessageState == MSG_RECEIVING)
00085a  f1b90f02          CMP      r9,#2
00085e  d107              BNE      |L1.2160|
;;;225    		  {
;;;226    			  if(CntForMsg < 10000)CntForMsg ++;
000860  f2427110          MOV      r1,#0x2710
000864  9804              LDR      r0,[sp,#0x10]
000866  4288              CMP      r0,r1
000868  d202              BCS      |L1.2160|
00086a  9804              LDR      r0,[sp,#0x10]
00086c  1c40              ADDS     r0,r0,#1
00086e  9004              STR      r0,[sp,#0x10]
                  |L1.2160|
;;;227    		  }
;;;228    		}
;;;229        
;;;230        switch(MessageState)
000870  f1b90f05          CMP      r9,#5
000874  d275              BCS      |L1.2402|
000876  e8dff009          TBB      [pc,r9]
00087a  030b              DCB      0x03,0x0b
00087c  1b3a7300          DCB      0x1b,0x3a,0x73,0x00
;;;231        {
;;;232          case MSG_IDLE:
;;;233            if(SpiFifo.Pop(&Cmd[0]))MessageState = MSG_BEGIN;
000880  a902              ADD      r1,sp,#8
000882  4843              LDR      r0,|L1.2448|
000884  f7fffffe          BL       _ZN10RingBufferIhE3PopEPh ; RingBuffer<unsigned char>::Pop(unsigned char*)
000888  b108              CBZ      r0,|L1.2190|
00088a  f04f0901          MOV      r9,#1
                  |L1.2190|
;;;234          break;
00088e  e070              B        |L1.2418|
;;;235          
;;;236          case MSG_BEGIN:
;;;237            if(Cmd[0] == MSG_START)
000890  f89d0008          LDRB     r0,[sp,#8]
000894  2887              CMP      r0,#0x87
000896  d106              BNE      |L1.2214|
;;;238            {
;;;239              MSgCount = 1;
000898  2701              MOVS     r7,#1
;;;240              CheckSum = Cmd[0];
00089a  f89d0008          LDRB     r0,[sp,#8]
00089e  9005              STR      r0,[sp,#0x14]
;;;241              MessageState = MSG_RECEIVING;
0008a0  f04f0902          MOV      r9,#2
0008a4  e003              B        |L1.2222|
                  |L1.2214|
;;;242            }
;;;243            else 
;;;244            {
;;;245              SpiSlaveSynchronize();
0008a6  f7fffffe          BL       SpiSlaveSynchronize
;;;246              MessageState = MSG_IDLE;
0008aa  f04f0900          MOV      r9,#0
                  |L1.2222|
;;;247            }
;;;248          break;
0008ae  e060              B        |L1.2418|
;;;249          
;;;250          case MSG_RECEIVING:
;;;251            if(SpiFifo.Pop(&Cmd[MSgCount]))
0008b0  a802              ADD      r0,sp,#8
0008b2  19c1              ADDS     r1,r0,r7
0008b4  4836              LDR      r0,|L1.2448|
0008b6  f7fffffe          BL       _ZN10RingBufferIhE3PopEPh ; RingBuffer<unsigned char>::Pop(unsigned char*)
0008ba  b1b8              CBZ      r0,|L1.2284|
;;;252            {
;;;253              CheckSum += Cmd[MSgCount];
0008bc  a802              ADD      r0,sp,#8
0008be  5dc1              LDRB     r1,[r0,r7]
0008c0  9805              LDR      r0,[sp,#0x14]
0008c2  4408              ADD      r0,r0,r1
0008c4  b2c0              UXTB     r0,r0
0008c6  9005              STR      r0,[sp,#0x14]
;;;254              if(++MSgCount == MSG_MAX_LENGTH)
0008c8  1c78              ADDS     r0,r7,#1
0008ca  b2c0              UXTB     r0,r0
0008cc  4607              MOV      r7,r0
0008ce  2806              CMP      r0,#6
0008d0  d10c              BNE      |L1.2284|
;;;255              {
;;;256                if(0xff &(CheckSum - Cmd[MSgCount-1]*2))MessageState = MSG_ERROR;
0008d2  1e78              SUBS     r0,r7,#1
0008d4  a902              ADD      r1,sp,#8
0008d6  5c08              LDRB     r0,[r1,r0]
0008d8  9905              LDR      r1,[sp,#0x14]
0008da  eba10040          SUB      r0,r1,r0,LSL #1
0008de  b2c0              UXTB     r0,r0
0008e0  b110              CBZ      r0,|L1.2280|
0008e2  f04f0904          MOV      r9,#4
0008e6  e001              B        |L1.2284|
                  |L1.2280|
;;;257                else MessageState = MSG_END;
0008e8  f04f0903          MOV      r9,#3
                  |L1.2284|
;;;258              }
;;;259            }
;;;260          break;
0008ec  e041              B        |L1.2418|
;;;261          
;;;262          case MSG_END:
;;;263            Index = Cmd[MSG_INDEX_INDEX];
0008ee  f89d500a          LDRB     r5,[sp,#0xa]
;;;264            switch(Cmd[MSG_INDEX_CMD])
0008f2  f89d0009          LDRB     r0,[sp,#9]
0008f6  2801              CMP      r0,#1
0008f8  d006              BEQ      |L1.2312|
0008fa  2802              CMP      r0,#2
0008fc  d013              BEQ      |L1.2342|
0008fe  2803              CMP      r0,#3
000900  d01a              BEQ      |L1.2360|
000902  2804              CMP      r0,#4
000904  d126              BNE      |L1.2388|
000906  e01e              B        |L1.2374|
                  |L1.2312|
;;;265    				{
;;;266    					case CMD_SET_ON_OFF://set on or off
;;;267    						if(Cmd[MSG_INDEX_VALUEL] & 0x01)PwmEnable[Index]();
000908  f89d000b          LDRB     r0,[sp,#0xb]
00090c  f0000001          AND      r0,r0,#1
000910  b120              CBZ      r0,|L1.2332|
000912  4920              LDR      r1,|L1.2452|
000914  f8510025          LDR      r0,[r1,r5,LSL #2]
000918  4780              BLX      r0
00091a  e003              B        |L1.2340|
                  |L1.2332|
;;;268    						else PwmDisable[Index]();
00091c  491e              LDR      r1,|L1.2456|
00091e  f8510025          LDR      r0,[r1,r5,LSL #2]
000922  4780              BLX      r0
                  |L1.2340|
;;;269    					  break;
000924  e017              B        |L1.2390|
                  |L1.2342|
;;;270    					
;;;271    					case CMD_SET_POLARITY://set Polarity
;;;272    						PwmSetPolarity[Index](Cmd[MSG_INDEX_VALUEL] & 0x01);
000926  f89d200b          LDRB     r2,[sp,#0xb]
00092a  f0020001          AND      r0,r2,#1
00092e  4a1b              LDR      r2,|L1.2460|
000930  f8521025          LDR      r1,[r2,r5,LSL #2]
000934  4788              BLX      r1
;;;273    					  break;
000936  e00e              B        |L1.2390|
                  |L1.2360|
;;;274    					
;;;275    					case CMD_SET_FREQ://set frequency
;;;276    						PwmSetFrequency[Index](*((U16*)&Cmd[MSG_INDEX_VALUEL]));
000938  f8bd000b          LDRH     r0,[sp,#0xb]
00093c  4a18              LDR      r2,|L1.2464|
00093e  f8521025          LDR      r1,[r2,r5,LSL #2]
000942  4788              BLX      r1
;;;277    					  break;				
000944  e007              B        |L1.2390|
                  |L1.2374|
;;;278    					
;;;279    					case CMD_SET_DUTY://set duty
;;;280    						PwmSetDuty[Index](*((U16*)&Cmd[MSG_INDEX_VALUEL]));
000946  f8bd000b          LDRH     r0,[sp,#0xb]
00094a  4a16              LDR      r2,|L1.2468|
00094c  f8521025          LDR      r1,[r2,r5,LSL #2]
000950  4788              BLX      r1
;;;281    					  break;
000952  e000              B        |L1.2390|
                  |L1.2388|
;;;282    					
;;;283    					default:break;
000954  bf00              NOP      
                  |L1.2390|
000956  bf00              NOP                            ;269
;;;284    				}
;;;285            MessageState = MSG_IDLE;
000958  f04f0900          MOV      r9,#0
;;;286          break;
00095c  e009              B        |L1.2418|
00095e  e000              B        |L1.2402|
;;;287          
;;;288          case MSG_ERROR:
;;;289          default:
000960  bf00              NOP      
                  |L1.2402|
;;;290            SpiFifo.ReSet();
000962  480b              LDR      r0,|L1.2448|
000964  f7fffffe          BL       _ZN10RingBufferIhE5ReSetEv ; RingBuffer<unsigned char>::ReSet()
;;;291            SpiSlaveSynchronize();
000968  f7fffffe          BL       SpiSlaveSynchronize
;;;292            MessageState = MSG_IDLE;
00096c  f04f0900          MOV      r9,#0
;;;293          break;
000970  bf00              NOP      
                  |L1.2418|
000972  bf00              NOP                            ;234
                  |L1.2420|
000974  e73c              B        |L1.2032|
;;;294        }
;;;295    	}
;;;296    	return 1;
;;;297    }
                          ENDP

                  __sti___8_main_cpp_SpiFifo PROC
000976  b510              PUSH     {r4,lr}               ;0
000978  4805              LDR      r0,|L1.2448|
00097a  f7fffffe          BL       _ZN10RingBufferIhEC1Ev ; RingBuffer<unsigned char>::RingBuffer()
00097e  4604              MOV      r4,r0                 ;0
000980  4a09              LDR      r2,|L1.2472|
000982  490a              LDR      r1,|L1.2476|
000984  f7fffffe          BL       __aeabi_atexit
000988  bd10              POP      {r4,pc}               ;0
                          ENDP

00098a  0000              DCW      0x0000
                  |L1.2444|
                          DCD      pwm
                  |L1.2448|
                          DCD      SpiFifo
                  |L1.2452|
                          DCD      PwmEnable
                  |L1.2456|
                          DCD      PwmDisable
                  |L1.2460|
                          DCD      PwmSetPolarity
                  |L1.2464|
                          DCD      PwmSetFrequency
                  |L1.2468|
                          DCD      PwmSetDuty
                  |L1.2472|
                          DCD      __dso_handle
                  |L1.2476|
                          DCD      _ZN10RingBufferIhED1Ev ; RingBuffer<unsigned char>::~RingBuffer()

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CmdBuffer
                          %        1024
                  SpiFifo
                          %        24

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_main_cpp_SpiFifo

                          AREA ||t._ZN10RingBufferIhE4PushEh||, COMGROUP=_ZN10RingBufferIhE4PushEh, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhE4PushEh PROC ; RingBuffer<unsigned char>::Push(unsigned char)
;;;56     template<typename T1>
;;;57     BOOL RingBuffer<T1>::Push(T1 data)
000000  4602              MOV      r2,r0
;;;58     {
;;;59     	if(emptySpace)
000002  6910              LDR      r0,[r2,#0x10]
000004  b1a0              CBZ      r0,|L18.48|
;;;60     	{
;;;61         _DisableCpuInttrupt();
000006  b672              CPSID    i
;;;62     		if(writePoint == bufSize)
000008  6853              LDR      r3,[r2,#4]
00000a  68d0              LDR      r0,[r2,#0xc]
00000c  4298              CMP      r0,r3
00000e  d104              BNE      |L18.26|
;;;63     		{
;;;64     			writePoint = 1;
000010  2001              MOVS     r0,#1
000012  60d0              STR      r0,[r2,#0xc]
;;;65     			pBuffer[0] = data;
000014  6810              LDR      r0,[r2,#0]
000016  7001              STRB     r1,[r0,#0]
000018  e004              B        |L18.36|
                  |L18.26|
;;;66     		}
;;;67     		else pBuffer[writePoint++] = data;
00001a  68d3              LDR      r3,[r2,#0xc]
00001c  1c58              ADDS     r0,r3,#1
00001e  60d0              STR      r0,[r2,#0xc]
000020  6810              LDR      r0,[r2,#0]
000022  54c1              STRB     r1,[r0,r3]
                  |L18.36|
;;;68     		emptySpace --;
000024  6910              LDR      r0,[r2,#0x10]
000026  1e40              SUBS     r0,r0,#1
000028  6110              STR      r0,[r2,#0x10]
;;;69         _EnableCpuInttrupt();
00002a  b662              CPSIE    i
;;;70         return TRUE;
00002c  2001              MOVS     r0,#1
                  |L18.46|
;;;71     	}
;;;72     	else return FALSE;
;;;73     }
00002e  4770              BX       lr
                  |L18.48|
000030  2000              MOVS     r0,#0                 ;72
000032  e7fc              B        |L18.46|
;;;74     
                          ENDP


                          AREA ||area_number.19||, COMGROUP=_ZN10RingBufferIhE4PushEh, LINKORDER=||t._ZN10RingBufferIhE4PushEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhE4PushEh||
                          DCD      0x00000001

                          AREA ||t._ZN10RingBufferIhE5ReSetEv||, COMGROUP=_ZN10RingBufferIhE5ReSetEv, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhE5ReSetEv PROC ; RingBuffer<unsigned char>::ReSet()
;;;45     template<typename T1>
;;;46     void RingBuffer<T1>::ReSet(void)
000000  b672              CPSID    i
;;;47     {
;;;48       _DisableCpuInttrupt();
;;;49     	readPoint = 0x00000000;
000002  2100              MOVS     r1,#0
000004  6081              STR      r1,[r0,#8]
;;;50     	writePoint = 0x00000000;
000006  60c1              STR      r1,[r0,#0xc]
;;;51     	emptySpace = bufSize;
000008  6841              LDR      r1,[r0,#4]
00000a  6101              STR      r1,[r0,#0x10]
;;;52     	empty = TRUE;
00000c  2101              MOVS     r1,#1
00000e  6141              STR      r1,[r0,#0x14]
;;;53       _EnableCpuInttrupt();
000010  b662              CPSIE    i
;;;54     }
000012  4770              BX       lr
;;;55     
                          ENDP


                          AREA ||area_number.26||, COMGROUP=_ZN10RingBufferIhE5ReSetEv, LINKORDER=||t._ZN10RingBufferIhE5ReSetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhE5ReSetEv||
                          DCD      0x00000001

                          AREA ||t._ZN10RingBufferIhE3PopEPh||, COMGROUP=_ZN10RingBufferIhE3PopEPh, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhE3PopEPh PROC ; RingBuffer<unsigned char>::Pop(unsigned char*)
;;;75     template<typename T1>
;;;76     BOOL RingBuffer<T1>::Pop(T1* data)
000000  4602              MOV      r2,r0
;;;77     {
;;;78     	if(emptySpace >= bufSize)return FALSE;
000002  6853              LDR      r3,[r2,#4]
000004  6910              LDR      r0,[r2,#0x10]
000006  4298              CMP      r0,r3
000008  d301              BCC      |L32.14|
00000a  2000              MOVS     r0,#0
                  |L32.12|
;;;79       _DisableCpuInttrupt();
;;;80     	if(readPoint == bufSize)
;;;81     	{
;;;82     		readPoint = 1;
;;;83     		*data = pBuffer[0];
;;;84     	}
;;;85     	else *data = pBuffer[readPoint++];
;;;86     	emptySpace ++;
;;;87     	_EnableCpuInttrupt();
;;;88       return TRUE;
;;;89     }
00000c  4770              BX       lr
                  |L32.14|
00000e  b672              CPSID    i                     ;79
000010  e9d23001          LDRD     r3,r0,[r2,#4]         ;80
000014  4298              CMP      r0,r3                 ;80
000016  d105              BNE      |L32.36|
000018  2001              MOVS     r0,#1                 ;82
00001a  6090              STR      r0,[r2,#8]            ;82
00001c  6810              LDR      r0,[r2,#0]            ;83
00001e  7800              LDRB     r0,[r0,#0]            ;83
000020  7008              STRB     r0,[r1,#0]            ;83
000022  e005              B        |L32.48|
                  |L32.36|
000024  6893              LDR      r3,[r2,#8]            ;85
000026  1c58              ADDS     r0,r3,#1              ;85
000028  6090              STR      r0,[r2,#8]            ;85
00002a  6810              LDR      r0,[r2,#0]            ;85
00002c  5cc0              LDRB     r0,[r0,r3]            ;85
00002e  7008              STRB     r0,[r1,#0]            ;85
                  |L32.48|
000030  6910              LDR      r0,[r2,#0x10]         ;86
000032  1c40              ADDS     r0,r0,#1              ;86
000034  6110              STR      r0,[r2,#0x10]         ;86
000036  b662              CPSIE    i                     ;87
000038  2001              MOVS     r0,#1                 ;88
00003a  e7e7              B        |L32.12|
;;;5      
                          ENDP


                          AREA ||area_number.33||, COMGROUP=_ZN10RingBufferIhE3PopEPh, LINKORDER=||t._ZN10RingBufferIhE3PopEPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhE3PopEPh||
                          DCD      0x00000001

                          AREA ||t._ZN10RingBufferIhE9SetBufferEPhj||, COMGROUP=_ZN10RingBufferIhE9SetBufferEPhj, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhE9SetBufferEPhj PROC ; RingBuffer<unsigned char>::SetBuffer(unsigned char*, unsigned)
;;;23     template<typename T1>
;;;24     void RingBuffer<T1>::SetBuffer(T1* pBuf,U32 size)
000000  6042              STR      r2,[r0,#4]
;;;25     {
;;;26     	bufSize = size;
;;;27     	pBuffer = pBuf;
000002  6001              STR      r1,[r0,#0]
;;;28     	emptySpace = bufSize;
000004  6843              LDR      r3,[r0,#4]
000006  6103              STR      r3,[r0,#0x10]
;;;29     }
000008  4770              BX       lr
;;;30     
                          ENDP


                          AREA ||area_number.40||, COMGROUP=_ZN10RingBufferIhE9SetBufferEPhj, LINKORDER=||t._ZN10RingBufferIhE9SetBufferEPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhE9SetBufferEPhj||
                          DCD      0x00000001

                          AREA ||t._ZN10RingBufferIhEC1Ev||, COMGROUP=_ZN10RingBufferIhEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhEC2Ev                  ; Alternate entry point ; RingBuffer<unsigned char>::RingBuffer__sub_object()
                  _ZN10RingBufferIhEC1Ev PROC ; RingBuffer<unsigned char>::RingBuffer()
;;;5      template<typename  T1>
;;;6      RingBuffer<T1>::RingBuffer()
;;;7      {
;;;8      	pBuffer = NULL;
;;;9        bufSize = 0x00000000;
;;;10       readPoint = 0x00000000;
;;;11     	writePoint = 0x00000000;
;;;12     	emptySpace = 0x00000000;
;;;13     	empty = TRUE;
;;;14     }
;;;15     
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
00000c  2101              MOVS     r1,#1
00000e  6141              STR      r1,[r0,#0x14]
000010  4770              BX       lr
                          ENDP


                          AREA ||area_number.47||, COMGROUP=_ZN10RingBufferIhEC1Ev, LINKORDER=||t._ZN10RingBufferIhEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10RingBufferIhED1Ev||, COMGROUP=_ZN10RingBufferIhED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10RingBufferIhED2Ev                  ; Alternate entry point ; RingBuffer<unsigned char>::~RingBuffer__sub_object()
                  _ZN10RingBufferIhED1Ev PROC ; RingBuffer<unsigned char>::~RingBuffer()
;;;16     template<typename T1>
;;;17     RingBuffer<T1>:: ~RingBuffer()
;;;18     {
;;;19     	
;;;20     }
;;;21     
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.54||, COMGROUP=_ZN10RingBufferIhED1Ev, LINKORDER=||t._ZN10RingBufferIhED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10RingBufferIhED1Ev||
                          DCD      0x00000001

                  __ARM_use_no_argv EQU 0
