<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\MChPwm.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\MChPwm.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Sep 16 10:03:52 2014
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___11_pwm_top_cpp_hdPwm &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[116]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">NMI_Handler</a><BR>
 <LI><a href="#[9c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">HardFault_Handler</a><BR>
 <LI><a href="#[9d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">MemManage_Handler</a><BR>
 <LI><a href="#[9e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9e]">BusFault_Handler</a><BR>
 <LI><a href="#[9f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9f]">UsageFault_Handler</a><BR>
 <LI><a href="#[a0]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">SVC_Handler</a><BR>
 <LI><a href="#[a1]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1]">DebugMon_Handler</a><BR>
 <LI><a href="#[a2]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">PendSV_Handler</a><BR>
 <LI><a href="#[a3]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">SysTick_Handler</a><BR>
 <LI><a href="#[b6]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b6]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9e]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b9]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ba]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[af]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b0]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b1]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b2]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b3]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b4]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b5]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a1]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[aa]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[cc]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ab]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ac]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ad]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ae]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[bb]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a8]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9c]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c4]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c3]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c6]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c5]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9d]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9b]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a5]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a2]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a9]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[cd]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a7]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9a]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c7]">SPI1_IRQHandler</a> from spi.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c8]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a0]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a3]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a6]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[bc]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[bf]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[be]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[bd]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c0]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c1]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c2]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c9]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ca]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[cb]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ce]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b7]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b8]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9f]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a4]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">PwmEnable0()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[14]">PwmEnable1()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[15]">PwmEnable2()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[16]">PwmEnable3()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[17]">PwmEnable4()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[18]">PwmEnable5()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[19]">PwmEnable6()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1a]">PwmEnable7()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1b]">PwmEnable8()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1c]">PwmEnable9()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8]">Pwm0PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[9]">Pwm1PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[a]">Pwm5PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[b]">Pwm6PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2e]">PwmDisable0()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2f]">PwmDisable1()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[30]">PwmDisable2()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[31]">PwmDisable3()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[32]">PwmDisable4()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[33]">PwmDisable5()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[34]">PwmDisable6()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[35]">PwmDisable7()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[36]">PwmDisable8()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[37]">PwmDisable9()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1d]">PwmEnable10()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1e]">PwmEnable11()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[1f]">PwmEnable12()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[20]">PwmEnable13()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[21]">PwmEnable14()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[22]">PwmEnable15()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[23]">PwmEnable16()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[24]">PwmEnable17()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[25]">PwmEnable18()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[26]">PwmEnable19()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[27]">PwmEnable20()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[28]">PwmEnable21()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[29]">PwmEnable22()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2a]">PwmEnable23()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2b]">PwmEnable24()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2c]">PwmEnable25()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[2d]">PwmEnable26()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[64]">PwmSetDuty0(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[65]">PwmSetDuty1(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[66]">PwmSetDuty2(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[67]">PwmSetDuty3(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[68]">PwmSetDuty4(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[69]">PwmSetDuty5(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6a]">PwmSetDuty6(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6b]">PwmSetDuty7(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6c]">PwmSetDuty8(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6d]">PwmSetDuty9(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[c]">Pwm12PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[d]">Pwm13PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[e]">Pwm14PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[f]">Pwm15PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[10]">Pwm16PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[11]">Pwm21PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[12]">Pwm26PinCtrl(unsigned char)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[38]">PwmDisable10()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[39]">PwmDisable11()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3a]">PwmDisable12()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3b]">PwmDisable13()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3c]">PwmDisable14()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3d]">PwmDisable15()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3e]">PwmDisable16()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[3f]">PwmDisable17()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[40]">PwmDisable18()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[41]">PwmDisable19()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[42]">PwmDisable20()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[43]">PwmDisable21()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[44]">PwmDisable22()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[45]">PwmDisable23()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[46]">PwmDisable24()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[47]">PwmDisable25()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[48]">PwmDisable26()</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6e]">PwmSetDuty10(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[6f]">PwmSetDuty11(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[70]">PwmSetDuty12(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[71]">PwmSetDuty13(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[72]">PwmSetDuty14(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[73]">PwmSetDuty15(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[74]">PwmSetDuty16(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[75]">PwmSetDuty17(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[76]">PwmSetDuty18(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[77]">PwmSetDuty19(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[78]">PwmSetDuty20(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[79]">PwmSetDuty21(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7a]">PwmSetDuty22(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7b]">PwmSetDuty23(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7c]">PwmSetDuty24(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7d]">PwmSetDuty25(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7e]">PwmSetDuty26(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[7f]">PwmSetPolarity0(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[80]">PwmSetPolarity1(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[81]">PwmSetPolarity2(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[82]">PwmSetPolarity3(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[83]">PwmSetPolarity4(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[84]">PwmSetPolarity5(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[85]">PwmSetPolarity6(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[86]">PwmSetPolarity7(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[87]">PwmSetPolarity8(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[88]">PwmSetPolarity9(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[49]">PwmSetFrequency0(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4a]">PwmSetFrequency1(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4b]">PwmSetFrequency2(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4c]">PwmSetFrequency3(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4d]">PwmSetFrequency4(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4e]">PwmSetFrequency5(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[4f]">PwmSetFrequency6(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[50]">PwmSetFrequency7(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[51]">PwmSetFrequency8(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[52]">PwmSetFrequency9(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[89]">PwmSetPolarity10(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8a]">PwmSetPolarity11(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8b]">PwmSetPolarity12(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8c]">PwmSetPolarity13(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8d]">PwmSetPolarity14(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8e]">PwmSetPolarity15(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[8f]">PwmSetPolarity16(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[90]">PwmSetPolarity17(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[91]">PwmSetPolarity18(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[92]">PwmSetPolarity19(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[93]">PwmSetPolarity20(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[94]">PwmSetPolarity21(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[95]">PwmSetPolarity22(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[96]">PwmSetPolarity23(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[97]">PwmSetPolarity24(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[98]">PwmSetPolarity25(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[99]">PwmSetPolarity26(unsigned)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[53]">PwmSetFrequency10(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[54]">PwmSetFrequency11(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[55]">PwmSetFrequency12(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[56]">PwmSetFrequency13(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[57]">PwmSetFrequency14(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[58]">PwmSetFrequency15(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[59]">PwmSetFrequency16(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5a]">PwmSetFrequency17(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5b]">PwmSetFrequency18(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5c]">PwmSetFrequency19(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5d]">PwmSetFrequency20(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5e]">PwmSetFrequency21(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[5f]">PwmSetFrequency22(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[60]">PwmSetFrequency23(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[61]">PwmSetFrequency24(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[62]">PwmSetFrequency25(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[63]">PwmSetFrequency26(unsigned short)</a> from pwm_top.o(.text) referenced 2 times from pwm_top.o(.data)
 <LI><a href="#[ed]">Spi1ISR()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[d0]">RingBuffer&lang;unsigned char&rang;::~RingBuffer()</a> from main.o(t._ZN10RingBufferIhED1Ev) referenced from main.o(.text)
 <LI><a href="#[d2]">PWM::~PWM()</a> from pwm.o(.text) referenced from pwm_top.o(.text)
 <LI><a href="#[d1]">HDPWM::~HDPWM()</a> from hardware_pwm.o(.text) referenced from pwm_top.o(.text)
 <LI><a href="#[d5]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[d4]">__sti___11_pwm_top_cpp_hdPwm</a> from pwm_top.o(.text) referenced from pwm_top.o(.init_array)
 <LI><a href="#[d3]">__sti___8_main_cpp_SpiFifo</a> from main.o(.text) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d5]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[120]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[da]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[122]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[123]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[124]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[125]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[126]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[127]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[128]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[130]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[131]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[132]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[133]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[e7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[df]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SpiInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[117]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[13e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[13f]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>delay_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Initial(unsigned, unsigned short, unsigned short)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioCfg()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfIoCfg()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitial
</UL>

<P><STRONG><a name="[c7]"></a>SPI1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>Log2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitial
</UL>

<P><STRONG><a name="[ea]"></a>SpiInitial</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpiInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>SpiDisableInterrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SpiEnableInterrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>SpiPoll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ISR()
</UL>

<P><STRONG><a name="[ee]"></a>GetSpiData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ISR()
</UL>

<P><STRONG><a name="[142]"></a>SpiExchangeByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>SpiSlaveSynchronize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ed]"></a>Spi1ISR()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spi1ISR()
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::Push(unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpiData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>RccCfg()</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>AfIoCfg()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AfIoCfg()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>GpioCfg()</STRONG> (Thumb, 1666 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioCfg()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>main</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; SpiInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Initial(unsigned, unsigned short, unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::RunningTask(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::SetBuffer(unsigned char*, unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::ReSet()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::Pop(unsigned char*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioCfg()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfIoCfg()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RccCfg()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSlaveSynchronize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10a]"></a>PWM::PWM(void*, unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM::PWM(void*, unsigned, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_pwm_top_cpp_hdPwm
</UL>

<P><STRONG><a name="[143]"></a>PWM::PWM__sub_object(void*, unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>PWM::~PWM()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>PWM::~PWM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>PWM::Reset(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::Reset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetOutPutSignal(unsigned char, void(*)(unsigned char))
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>

<P><STRONG><a name="[101]"></a>PWM::Enable(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable26()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable21()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable16()
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable15()
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable14()
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable13()
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable12()
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable6()
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable5()
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable1()
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable0()
</UL>

<P><STRONG><a name="[fd]"></a>PWM::Disable(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Reset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable26()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable21()
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable16()
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable15()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable14()
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable13()
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable12()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable6()
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable5()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable1()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable0()
</UL>

<P><STRONG><a name="[106]"></a>PWM::SetDuty(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty26(unsigned short)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty21(unsigned short)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty16(unsigned short)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty15(unsigned short)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty14(unsigned short)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty13(unsigned short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty12(unsigned short)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty6(unsigned short)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty5(unsigned short)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty1(unsigned short)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty0(unsigned short)
</UL>

<P><STRONG><a name="[104]"></a>PWM::SetFrequency(unsigned char, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency26(unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency21(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency16(unsigned short)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency15(unsigned short)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency14(unsigned short)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency13(unsigned short)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency12(unsigned short)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency6(unsigned short)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency5(unsigned short)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency1(unsigned short)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency0(unsigned short)
</UL>

<P><STRONG><a name="[ff]"></a>PWM::SetPolarity(unsigned char, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Reset(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity26(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity21(unsigned)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity16(unsigned)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity15(unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity14(unsigned)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity13(unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity12(unsigned)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity6(unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity5(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity1(unsigned)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity0(unsigned)
</UL>

<P><STRONG><a name="[100]"></a>PWM::SetOutPutSignal(unsigned char, void(*)(unsigned char))</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Reset(unsigned char)
</UL>

<P><STRONG><a name="[f7]"></a>PWM::RunningTask(unsigned)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::RunningTask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>HDPWM::HDPWM()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_pwm_top_cpp_hdPwm
</UL>

<P><STRONG><a name="[145]"></a>HDPWM::HDPWM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardware_pwm.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>HDPWM::~HDPWM()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware_pwm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>HDPWM::~HDPWM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardware_pwm.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>HDPWM::Initial(unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 726 bytes, Stack size 24 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HDPWM::Initial(unsigned, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>HDPWM::Enable(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDPWM::Enable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable25()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable24()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable23()
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable22()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable20()
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable19()
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable18()
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable17()
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable11()
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable10()
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable9()
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable8()
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable7()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable4()
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable3()
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable2()
</UL>

<P><STRONG><a name="[103]"></a>HDPWM::Disable(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDPWM::Disable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable25()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable24()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable23()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable22()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable20()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable19()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable18()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable17()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable11()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable10()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable9()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable8()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable7()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable4()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable3()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisable2()
</UL>

<P><STRONG><a name="[107]"></a>HDPWM::SetDuty(unsigned char, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty25(unsigned short)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty24(unsigned short)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty23(unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty22(unsigned short)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty20(unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty19(unsigned short)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty18(unsigned short)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty17(unsigned short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty11(unsigned short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty10(unsigned short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty9(unsigned short)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty8(unsigned short)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty7(unsigned short)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty4(unsigned short)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty3(unsigned short)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetDuty2(unsigned short)
</UL>

<P><STRONG><a name="[105]"></a>HDPWM::SetFrequency(unsigned char, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency25(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency24(unsigned short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency23(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency22(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency20(unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency19(unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency18(unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency17(unsigned short)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency11(unsigned short)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency10(unsigned short)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency9(unsigned short)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency8(unsigned short)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency7(unsigned short)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency4(unsigned short)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency3(unsigned short)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetFrequency2(unsigned short)
</UL>

<P><STRONG><a name="[108]"></a>HDPWM::SetPolarity(unsigned char, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, hardware_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity25(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity24(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity23(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity22(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity20(unsigned)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity19(unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity18(unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity17(unsigned)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity11(unsigned)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity10(unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity9(unsigned)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity8(unsigned)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity7(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity4(unsigned)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity3(unsigned)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmSetPolarity2(unsigned)
</UL>

<P><STRONG><a name="[13]"></a>PwmEnable0()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable0()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>PwmEnable1()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable1()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>PwmEnable2()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable2() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>PwmEnable3()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable3() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>PwmEnable4()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable4() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>PwmEnable5()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable5()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>PwmEnable6()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable6()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>PwmEnable7()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable7() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>PwmEnable8()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable8() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>PwmEnable9()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable9() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>PwmEnable10()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable10() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>PwmEnable11()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable11() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>PwmEnable12()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable12()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>PwmEnable13()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable13()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>PwmEnable14()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable14()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>PwmEnable15()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable15()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>PwmEnable16()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable16()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>PwmEnable17()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable17() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>PwmEnable18()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable18() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>PwmEnable19()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable19() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>PwmEnable20()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable20() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>PwmEnable21()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable21()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>PwmEnable22()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable22() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>PwmEnable23()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable23() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>PwmEnable24()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable24() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>PwmEnable25()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmEnable25() &rArr; HDPWM::Enable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>PwmEnable26()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmEnable26()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Enable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>PwmDisable0()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable0() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>PwmDisable1()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable1() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>PwmDisable2()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable2() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>PwmDisable3()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable3() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>PwmDisable4()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable4() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>PwmDisable5()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable5() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>PwmDisable6()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable6() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>PwmDisable7()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable7() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>PwmDisable8()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable8() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>PwmDisable9()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable9() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>PwmDisable10()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable10() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>PwmDisable11()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable11() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>PwmDisable12()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable12() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>PwmDisable13()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable13() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>PwmDisable14()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable14() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>PwmDisable15()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable15() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>PwmDisable16()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable16() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>PwmDisable17()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable17() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>PwmDisable18()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable18() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>PwmDisable19()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable19() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>PwmDisable20()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable20() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>PwmDisable21()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable21() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>PwmDisable22()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable22() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>PwmDisable23()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable23() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>PwmDisable24()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable24() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>PwmDisable25()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmDisable25() &rArr; HDPWM::Disable(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>PwmDisable26()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmDisable26() &rArr; PWM::Disable(unsigned char) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Disable(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>PwmSetFrequency0(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency0(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>PwmSetFrequency1(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency1(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>PwmSetFrequency2(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency2(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>PwmSetFrequency3(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency3(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>PwmSetFrequency4(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency4(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>PwmSetFrequency5(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency5(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>PwmSetFrequency6(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency6(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>PwmSetFrequency7(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency7(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>PwmSetFrequency8(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency8(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>PwmSetFrequency9(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency9(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>PwmSetFrequency10(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency10(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>PwmSetFrequency11(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency11(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>PwmSetFrequency12(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency12(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>PwmSetFrequency13(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency13(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>PwmSetFrequency14(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency14(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>PwmSetFrequency15(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency15(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>PwmSetFrequency16(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency16(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>PwmSetFrequency17(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency17(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>PwmSetFrequency18(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency18(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>PwmSetFrequency19(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency19(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>PwmSetFrequency20(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency20(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>PwmSetFrequency21(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency21(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>PwmSetFrequency22(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency22(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>PwmSetFrequency23(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency23(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>PwmSetFrequency24(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency24(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>PwmSetFrequency25(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency25(unsigned short) &rArr; HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>PwmSetFrequency26(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetFrequency26(unsigned short) &rArr; PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetFrequency(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>PwmSetDuty0(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty0(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>PwmSetDuty1(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty1(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>PwmSetDuty2(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty2(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>PwmSetDuty3(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty3(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>PwmSetDuty4(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty4(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>PwmSetDuty5(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty5(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>PwmSetDuty6(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty6(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>PwmSetDuty7(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty7(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>PwmSetDuty8(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty8(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>PwmSetDuty9(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty9(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>PwmSetDuty10(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty10(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>PwmSetDuty11(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty11(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>PwmSetDuty12(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty12(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>PwmSetDuty13(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty13(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>PwmSetDuty14(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty14(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>PwmSetDuty15(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty15(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>PwmSetDuty16(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty16(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>PwmSetDuty17(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty17(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>PwmSetDuty18(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty18(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>PwmSetDuty19(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty19(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>PwmSetDuty20(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty20(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>PwmSetDuty21(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty21(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>PwmSetDuty22(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty22(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>PwmSetDuty23(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty23(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>PwmSetDuty24(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty24(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>PwmSetDuty25(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetDuty25(unsigned short) &rArr; HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>PwmSetDuty26(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmSetDuty26(unsigned short) &rArr; PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>PwmSetPolarity0(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity0(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>PwmSetPolarity1(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity1(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>PwmSetPolarity2(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity2(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>PwmSetPolarity3(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity3(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>PwmSetPolarity4(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity4(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>PwmSetPolarity5(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity5(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>PwmSetPolarity6(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity6(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>PwmSetPolarity7(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity7(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>PwmSetPolarity8(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity8(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>PwmSetPolarity9(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity9(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>PwmSetPolarity10(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity10(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>PwmSetPolarity11(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity11(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>PwmSetPolarity12(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity12(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>PwmSetPolarity13(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity13(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>PwmSetPolarity14(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity14(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>PwmSetPolarity15(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity15(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>PwmSetPolarity16(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity16(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>PwmSetPolarity17(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity17(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>PwmSetPolarity18(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity18(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>PwmSetPolarity19(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity19(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>PwmSetPolarity20(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity20(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>PwmSetPolarity21(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity21(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>PwmSetPolarity22(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity22(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>PwmSetPolarity23(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity23(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>PwmSetPolarity24(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity24(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>PwmSetPolarity25(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmSetPolarity25(unsigned) &rArr; HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>PwmSetPolarity26(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PwmSetPolarity26(unsigned) &rArr; PWM::SetPolarity(unsigned char, unsigned) &rArr; PWM::Reset(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetPolarity(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Pwm0PinCtrl(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Pwm1PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Pwm5PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Pwm6PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Pwm12PinCtrl(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Pwm13PinCtrl(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Pwm14PinCtrl(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Pwm15PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Pwm16PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Pwm21PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Pwm26PinCtrl(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[10c]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[11a]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[14b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[10f]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[db]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[111]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[14d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[110]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[14f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e5]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[114]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[113]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e9]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[118]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[119]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_pwm_top_cpp_hdPwm
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_SpiFifo
</UL>

<P><STRONG><a name="[de]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[f8]"></a>RingBuffer&lang;unsigned char&rang;::Pop(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhE3PopEPh))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>RingBuffer&lang;unsigned char&rang;::Push(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhE4PushEh))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ISR()
</UL>

<P><STRONG><a name="[fa]"></a>RingBuffer&lang;unsigned char&rang;::ReSet()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhE5ReSetEv))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>RingBuffer&lang;unsigned char&rang;::SetBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhE9SetBufferEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>RingBuffer&lang;unsigned char&rang;::RingBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_SpiFifo
</UL>

<P><STRONG><a name="[152]"></a>RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhEC1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>RingBuffer&lang;unsigned char&rang;::~RingBuffer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhED1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN10RingBufferIhED1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d3]"></a>__sti___8_main_cpp_SpiFifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_main_cpp_SpiFifo &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[d4]"></a>__sti___11_pwm_top_cpp_hdPwm</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pwm_top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___11_pwm_top_cpp_hdPwm &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDPWM::HDPWM()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(void*, unsigned, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_top.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
